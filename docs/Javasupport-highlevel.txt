
Javasupport High-level API
--------------------------
$Id$


Module:

    instance methods:

    include_package( aString )

        Includes a Java package into this class/module. The Java
        classes in the package will become available in this
        class/module, unless a constant with the same name as a Java
        class is already defined.

        Example:

            module MyModule
              include_package "java.util"

              # Create an instance of java.util.Random
              random = Random.new

              # Call a Java method
              random.nextInt                  # -> some Fixnum
              # Call another Java method
              random.nextInt(10)              # -> some Fixnum (0..9)
            end

    java_alias( newId, oldId )

        Defines an alternative name for a Java class, so that Java
        classes with names colliding with Ruby classes can be accessed.

        Example:

            module MyModule
              include_package 'java.lang'
              java_alias :JavaInteger, :Integer
            end

            MyModule::JavaInteger.new(123) # -> a java.lang.Integer

Object:

    instance methods:

    include_class ( aString | anArray ) {|package,className| ... }

        Includes a single (or multiple in array case) class into the
        current namespace as a constant of the same name.  Optionally,
        a block can be supplied which allows you to choose another name.

        Example:

           include_class "java.util.Random"
           include_class "java.lang.String" { |p,name| "J" + name }

           s = JString.new("My random number is #{Random.nextInt}")

        Example2:
   
           include_class ["Vector", "Hashtable"].map {|e| "javax.util." + e}

	   h = Hashtable.new

The Java classes made available through include_package have the
following properties:

    class methods:

    cls.new( [ anObject ]* ) -> anObject

        If the Java class is a real class then a new instance of that
        class is returned.
        If it is an interface, then a "reflection proxy" for that
        interface is returned (see java.lang.reflect.Proxy).
        If it is an array type, then the only valid constructor
        argument is an integer for the wanted array length.

    cls.java_class() -> a Java::JavaClass instance

        Returns the low-level representation of the Java class. Useful
        only if you need to access the inner workings of the Java
        support.

    cls[] -> aClass

        Returns the Class for the array-type of the current class.

        Example:

            JFrame[].new(3)  # -> An array of JFrames with length 3.


    instance methods:

    All public methods on the Java object are made available as Ruby
    methods. If a method is overloaded (two or more methods with the
    same name) then then the first one found matching the argument
    types is called.

    If the Java object is an array then the following methods are
    available instead.

    javaarray.length -> aFixnum

        Returns the length of the Java array

    javaarray[ anInteger ] -> anObject

        Returns the object stored in the array at the given position.

    javaarray[ anInteger ] = anObject -> anObject

        Sets the value in the given position of the array to the given
        value. The value is also returned.

    javaarray.each {|item| ... }

        Calls the block once for every item in the array, with that
        item as the parameter.

    The Java arrays also implement Enumerable.

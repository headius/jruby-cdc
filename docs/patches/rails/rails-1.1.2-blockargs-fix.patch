Index: lib/breakpoint_client.rb
===================================================================
--- lib/breakpoint_client.rb	(revision 4444)
+++ lib/breakpoint_client.rb	(working copy)
@@ -30,7 +30,7 @@
     "connections from the server.",
     "Default: Find a good URI automatically.",
     "Example: -c druby://localhost:12345"
-  ) { |Options[:ClientURI]| }
+  ) { |v| Options[:ClientURI] = v }
 
   opts.on("-s", "--server-uri=uri",
     "Connect to the server specified at the",
@@ -36,7 +36,7 @@
     "Connect to the server specified at the",
     "specified uri.",
     "Default: druby://localhost:42531"
-  ) { |Options[:ServerURI]| }
+  ) { |v| Options[:ServerURI] = v }
 
   opts.on("-R", "--retry-delay=delay", Integer,
     "Automatically try to reconnect to the",
@@ -45,7 +45,7 @@
     "A value of 0 disables automatical",
     "reconnecting completely.",
     "Default: 10"
-  ) { |Options[:RetryDelay]| }
+  ) { |v| Options[:RetryDelay] = v }
 
   opts.on("-P", "--[no-]permanent",
     "Run the breakpoint client in permanent mode.",
@@ -52,7 +52,7 @@
     "This means that the client will keep continue",
     "running even after the server has closed the",
     "connection. Useful for example in Rails."
-  ) { |Options[:Permanent]| }
+  ) { |v| Options[:Permanent] = v }
 
   opts.on("-V", "--[no-]verbose",
     "Run the breakpoint client in verbose mode.",
@@ -60,7 +60,7 @@
     "individual breakpoints. This might help in seeing",
     "that the breakpoint client is still alive, but adds",
     "quite a bit of clutter."
-  ) { |Options[:Verbose]| }
+  ) { |v| Options[:Verbose] = v }
 
   opts.separator ""
 
Index: lib/commands/console.rb
===================================================================
--- lib/commands/console.rb	(revision 4444)
+++ lib/commands/console.rb	(working copy)
@@ -1,25 +1,25 @@
-irb = RUBY_PLATFORM =~ /mswin32/ ? 'irb.bat' : 'irb'
-
-require 'optparse'
-options = { :sandbox => false, :irb => irb }
-OptionParser.new do |opt|
-  opt.banner = "Usage: console [environment] [options]"
-  opt.on('-s', '--sandbox', 'Rollback database modifications on exit.') { |options[:sandbox]| }
-  opt.on("--irb=[#{irb}]", 'Invoke a different irb.') { |options[:irb]| }
-  opt.parse!(ARGV)
-end
-
-libs =  " -r irb/completion"
-libs << " -r #{RAILS_ROOT}/config/environment"
-libs << " -r console_app"
-libs << " -r console_sandbox" if options[:sandbox]
-libs << " -r console_with_helpers"
-
-ENV['RAILS_ENV'] = ARGV.first || ENV['RAILS_ENV'] || 'development'
-if options[:sandbox]
-  puts "Loading #{ENV['RAILS_ENV']} environment in sandbox."
-  puts "Any modifications you make will be rolled back on exit."
-else
-  puts "Loading #{ENV['RAILS_ENV']} environment."
-end
-exec "#{options[:irb]} #{libs} --simple-prompt"
+irb = RUBY_PLATFORM =~ /mswin32/ ? 'irb.bat' : 'irb'
+
+require 'optparse'
+options = { :sandbox => false, :irb => irb }
+OptionParser.new do |opt|
+  opt.banner = "Usage: console [environment] [options]"
+  opt.on('-s', '--sandbox', 'Rollback database modifications on exit.') { |v| options[:sandbox] = v }
+  opt.on("--irb=[#{irb}]", 'Invoke a different irb.') { |v| options[:irb] = v }
+  opt.parse!(ARGV)
+end
+
+libs =  " -r irb/completion"
+libs << " -r #{RAILS_ROOT}/config/environment"
+libs << " -r console_app"
+libs << " -r console_sandbox" if options[:sandbox]
+libs << " -r console_with_helpers"
+
+ENV['RAILS_ENV'] = ARGV.first || ENV['RAILS_ENV'] || 'development'
+if options[:sandbox]
+  puts "Loading #{ENV['RAILS_ENV']} environment in sandbox."
+  puts "Any modifications you make will be rolled back on exit."
+else
+  puts "Loading #{ENV['RAILS_ENV']} environment."
+end
+exec "#{options[:irb]} #{libs} --simple-prompt"
Index: lib/commands/process/reaper.rb
===================================================================
--- lib/commands/process/reaper.rb	(revision 4444)
+++ lib/commands/process/reaper.rb	(working copy)
@@ -117,8 +117,8 @@
 
   opts.on("  Options:")
 
-  opts.on("-a", "--action=name", "reload|graceful|kill (default: #{OPTIONS[:action]})", String)  { |OPTIONS[:action]| }
-  opts.on("-d", "--dispatcher=path", "default: #{OPTIONS[:dispatcher]}", String)                 { |OPTIONS[:dispatcher]| }
+  opts.on("-a", "--action=name", "reload|graceful|kill (default: #{OPTIONS[:action]})", String)  { |v| OPTIONS[:action] = v }
+  opts.on("-d", "--dispatcher=path", "default: #{OPTIONS[:dispatcher]}", String)                 { |v| OPTIONS[:dispatcher] = v }
 
   opts.separator ""
 
Index: lib/commands/process/spawner.rb
===================================================================
--- lib/commands/process/spawner.rb	(revision 4444)
+++ lib/commands/process/spawner.rb	(working copy)
@@ -65,11 +65,11 @@
 
   opts.on("  Options:")
 
-  opts.on("-p", "--port=number",      Integer, "Starting port number (default: #{OPTIONS[:port]})")                { |OPTIONS[:port]| }
-  opts.on("-i", "--instances=number", Integer, "Number of instances (default: #{OPTIONS[:instances]})")            { |OPTIONS[:instances]| }
-  opts.on("-r", "--repeat=seconds",   Integer, "Repeat spawn attempts every n seconds (default: off)")             { |OPTIONS[:repeat]| }
-  opts.on("-e", "--environment=name", String,  "test|development|production (default: #{OPTIONS[:environment]})")  { |OPTIONS[:environment]| }
-  opts.on("-s", "--spawner=path",     String,  "default: #{OPTIONS[:spawner]}")                                    { |OPTIONS[:spawner]| }
+  opts.on("-p", "--port=number",      Integer, "Starting port number (default: #{OPTIONS[:port]})")                { |v| OPTIONS[:port] = v }
+  opts.on("-i", "--instances=number", Integer, "Number of instances (default: #{OPTIONS[:instances]})")            { |v| OPTIONS[:instances] = v }
+  opts.on("-r", "--repeat=seconds",   Integer, "Repeat spawn attempts every n seconds (default: off)")             { |v| OPTIONS[:repeat] = v }
+  opts.on("-e", "--environment=name", String,  "test|development|production (default: #{OPTIONS[:environment]})")  { |v| OPTIONS[:environment] = v }
+  opts.on("-s", "--spawner=path",     String,  "default: #{OPTIONS[:spawner]}")                                    { |v| OPTIONS[:spawner] = v }
   opts.on("-d", "--dispatcher=path",  String,  "default: #{OPTIONS[:dispatcher]}") { |dispatcher| OPTIONS[:dispatcher] = File.expand_path(dispatcher) }
 
   opts.separator ""
Index: lib/commands/process/spinner.rb
===================================================================
--- lib/commands/process/spinner.rb	(revision 4444)
+++ lib/commands/process/spinner.rb	(working copy)
@@ -1,57 +1,57 @@
-require 'optparse'
-
-def daemonize #:nodoc:
-  exit if fork                   # Parent exits, child continues.
-  Process.setsid                 # Become session leader.
-  exit if fork                   # Zap session leader. See [1].
-  Dir.chdir "/"                  # Release old working directory.
-  File.umask 0000                # Ensure sensible umask. Adjust as needed.
-  STDIN.reopen "/dev/null"       # Free file descriptors and
-  STDOUT.reopen "/dev/null", "a" # point them somewhere sensible.
-  STDERR.reopen STDOUT           # STDOUT/ERR should better go to a logfile.
-end
-
-OPTIONS = {
-  :interval => 5.0,
-  :command  => File.expand_path(RAILS_ROOT + '/script/process/spawner'),
-  :daemon   => false
-}
-
-ARGV.options do |opts|
-  opts.banner = "Usage: spinner [options]"
-
-  opts.separator ""
-
-  opts.on <<-EOF
-  Description:
-    The spinner is a protection loop for the spawner, which will attempt to restart any FCGI processes
-    that might have been exited or outright crashed. It's a brute-force attempt that'll just try
-    to run the spawner every X number of seconds, so it does pose a light load on the server.
-
-  Examples:
-    spinner # attempts to run the spawner with default settings every second with output on the terminal
-    spinner -i 3 -d # only run the spawner every 3 seconds and detach from the terminal to become a daemon
-    spinner -c '/path/to/app/script/process/spawner -p 9000 -i 10' -d # using custom spawner
-  EOF
-
-  opts.on("  Options:")
-
-  opts.on("-c", "--command=path",    String) { |OPTIONS[:command]| }
-  opts.on("-i", "--interval=seconds", Float) { |OPTIONS[:interval]| }
-  opts.on("-d", "--daemon")                  { |OPTIONS[:daemon]| }
-
-  opts.separator ""
-
-  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }
-
-  opts.parse!
-end
-
-daemonize if OPTIONS[:daemon]
-
-trap(OPTIONS[:daemon] ? "TERM" : "INT") { exit }
-
-loop do
-  system(OPTIONS[:command])
-  sleep(OPTIONS[:interval])
+require 'optparse'
+
+def daemonize #:nodoc:
+  exit if fork                   # Parent exits, child continues.
+  Process.setsid                 # Become session leader.
+  exit if fork                   # Zap session leader. See [1].
+  Dir.chdir "/"                  # Release old working directory.
+  File.umask 0000                # Ensure sensible umask. Adjust as needed.
+  STDIN.reopen "/dev/null"       # Free file descriptors and
+  STDOUT.reopen "/dev/null", "a" # point them somewhere sensible.
+  STDERR.reopen STDOUT           # STDOUT/ERR should better go to a logfile.
+end
+
+OPTIONS = {
+  :interval => 5.0,
+  :command  => File.expand_path(RAILS_ROOT + '/script/process/spawner'),
+  :daemon   => false
+}
+
+ARGV.options do |opts|
+  opts.banner = "Usage: spinner [options]"
+
+  opts.separator ""
+
+  opts.on <<-EOF
+  Description:
+    The spinner is a protection loop for the spawner, which will attempt to restart any FCGI processes
+    that might have been exited or outright crashed. It's a brute-force attempt that'll just try
+    to run the spawner every X number of seconds, so it does pose a light load on the server.
+
+  Examples:
+    spinner # attempts to run the spawner with default settings every second with output on the terminal
+    spinner -i 3 -d # only run the spawner every 3 seconds and detach from the terminal to become a daemon
+    spinner -c '/path/to/app/script/process/spawner -p 9000 -i 10' -d # using custom spawner
+  EOF
+
+  opts.on("  Options:")
+
+  opts.on("-c", "--command=path",    String) { |v| OPTIONS[:command] = v }
+  opts.on("-i", "--interval=seconds", Float) { |v| OPTIONS[:interval] = v }
+  opts.on("-d", "--daemon")                  { |v| OPTIONS[:daemon] = v }
+
+  opts.separator ""
+
+  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }
+
+  opts.parse!
+end
+
+daemonize if OPTIONS[:daemon]
+
+trap(OPTIONS[:daemon] ? "TERM" : "INT") { exit }
+
+loop do
+  system(OPTIONS[:command])
+  sleep(OPTIONS[:interval])
 end
\ No newline at end of file
Index: lib/commands/runner.rb
===================================================================
--- lib/commands/runner.rb	(revision 4444)
+++ lib/commands/runner.rb	(working copy)
@@ -1,27 +1,27 @@
-require 'optparse'
-
-options = { :environment => (ENV['RAILS_ENV'] || "development").dup }
-
-ARGV.options do |opts|
-  script_name = File.basename($0)
-  opts.banner = "Usage: runner 'puts Person.find(1).name' [options]"
-
-  opts.separator ""
-
-  opts.on("-e", "--environment=name", String,
-          "Specifies the environment for the runner to operate under (test/development/production).",
-          "Default: development") { |options[:environment]| }
-
-  opts.separator ""
-
-  opts.on("-h", "--help",
-          "Show this help message.") { puts opts; exit }
-
-  opts.parse!
-end
-
-ENV["RAILS_ENV"] = options[:environment]
-RAILS_ENV.replace(options[:environment]) if defined?(RAILS_ENV)
-
-require RAILS_ROOT + '/config/environment'
-ARGV.empty? ? puts("Usage: runner 'code' [options]") : eval(ARGV.first)
+require 'optparse'
+
+options = { :environment => (ENV['RAILS_ENV'] || "development").dup }
+
+ARGV.options do |opts|
+  script_name = File.basename($0)
+  opts.banner = "Usage: runner 'puts Person.find(1).name' [options]"
+
+  opts.separator ""
+
+  opts.on("-e", "--environment=name", String,
+          "Specifies the environment for the runner to operate under (test/development/production).",
+          "Default: development") { |v| options[:environment] = v }
+
+  opts.separator ""
+
+  opts.on("-h", "--help",
+          "Show this help message.") { puts opts; exit }
+
+  opts.parse!
+end
+
+ENV["RAILS_ENV"] = options[:environment]
+RAILS_ENV.replace(options[:environment]) if defined?(RAILS_ENV)
+
+require RAILS_ROOT + '/config/environment'
+ARGV.empty? ? puts("Usage: runner 'code' [options]") : eval(ARGV.first)
Index: lib/commands/servers/webrick.rb
===================================================================
--- lib/commands/servers/webrick.rb	(revision 4444)
+++ lib/commands/servers/webrick.rb	(working copy)
@@ -1,59 +1,59 @@
-require 'webrick'
-require 'optparse'
-
-OPTIONS = {
-  :port            => 3000,
-  :ip              => "0.0.0.0",
-  :environment     => (ENV['RAILS_ENV'] || "development").dup,
-  :server_root     => File.expand_path(RAILS_ROOT + "/public/"),
-  :server_type     => WEBrick::SimpleServer,
-  :charset         => "UTF-8",
-  :mime_types      => WEBrick::HTTPUtils::DefaultMimeTypes
-}
-
-ARGV.options do |opts|
-  script_name = File.basename($0)
-  opts.banner = "Usage: ruby #{script_name} [options]"
-
-  opts.separator ""
-
-  opts.on("-p", "--port=port", Integer,
-          "Runs Rails on the specified port.",
-          "Default: 3000") { |OPTIONS[:port]| }
-  opts.on("-b", "--binding=ip", String,
-          "Binds Rails to the specified ip.",
-          "Default: 0.0.0.0") { |OPTIONS[:ip]| }
-  opts.on("-e", "--environment=name", String,
-          "Specifies the environment to run this server under (test/development/production).",
-          "Default: development") { |OPTIONS[:environment]| }
-  opts.on("-m", "--mime-types=filename", String,
-                  "Specifies an Apache style mime.types configuration file to be used for mime types",
-                  "Default: none") { |mime_types_file| OPTIONS[:mime_types] = WEBrick::HTTPUtils::load_mime_types(mime_types_file) }
-
-  opts.on("-d", "--daemon",
-          "Make Rails run as a Daemon (only works if fork is available -- meaning on *nix)."
-          ) { OPTIONS[:server_type] = WEBrick::Daemon }
-
-  opts.on("-c", "--charset=charset", String,
-          "Set default charset for output.",
-          "Default: UTF-8") { |OPTIONS[:charset]| }
-
-  opts.separator ""
-
-  opts.on("-h", "--help",
-          "Show this help message.") { puts opts; exit }
-
-  opts.parse!
-end
-
-ENV["RAILS_ENV"] = OPTIONS[:environment]
-RAILS_ENV.replace(OPTIONS[:environment]) if defined?(RAILS_ENV)
-
-require RAILS_ROOT + "/config/environment"
-require 'webrick_server'
-
-OPTIONS['working_directory'] = File.expand_path(RAILS_ROOT)
-
-puts "=> Rails application started on http://#{OPTIONS[:ip]}:#{OPTIONS[:port]}"
-puts "=> Ctrl-C to shutdown server; call with --help for options" if OPTIONS[:server_type] == WEBrick::SimpleServer
-DispatchServlet.dispatch(OPTIONS)
+require 'webrick'
+require 'optparse'
+
+OPTIONS = {
+  :port            => 3000,
+  :ip              => "0.0.0.0",
+  :environment     => (ENV['RAILS_ENV'] || "development").dup,
+  :server_root     => File.expand_path(RAILS_ROOT + "/public/"),
+  :server_type     => WEBrick::SimpleServer,
+  :charset         => "UTF-8",
+  :mime_types      => WEBrick::HTTPUtils::DefaultMimeTypes
+}
+
+ARGV.options do |opts|
+  script_name = File.basename($0)
+  opts.banner = "Usage: ruby #{script_name} [options]"
+
+  opts.separator ""
+
+  opts.on("-p", "--port=port", Integer,
+          "Runs Rails on the specified port.",
+          "Default: 3000") { |v| OPTIONS[:port] = v }
+  opts.on("-b", "--binding=ip", String,
+          "Binds Rails to the specified ip.",
+          "Default: 0.0.0.0") { |v| OPTIONS[:ip] = v }
+  opts.on("-e", "--environment=name", String,
+          "Specifies the environment to run this server under (test/development/production).",
+          "Default: development") { |v| OPTIONS[:environment] = v }
+  opts.on("-m", "--mime-types=filename", String,
+                  "Specifies an Apache style mime.types configuration file to be used for mime types",
+                  "Default: none") { |mime_types_file| OPTIONS[:mime_types] = WEBrick::HTTPUtils::load_mime_types(mime_types_file) }
+
+  opts.on("-d", "--daemon",
+          "Make Rails run as a Daemon (only works if fork is available -- meaning on *nix)."
+          ) { OPTIONS[:server_type] = WEBrick::Daemon }
+
+  opts.on("-c", "--charset=charset", String,
+          "Set default charset for output.",
+          "Default: UTF-8") { |v| OPTIONS[:charset] = v }
+
+  opts.separator ""
+
+  opts.on("-h", "--help",
+          "Show this help message.") { puts opts; exit }
+
+  opts.parse!
+end
+
+ENV["RAILS_ENV"] = OPTIONS[:environment]
+RAILS_ENV.replace(OPTIONS[:environment]) if defined?(RAILS_ENV)
+
+require RAILS_ROOT + "/config/environment"
+require 'webrick_server'
+
+OPTIONS['working_directory'] = File.expand_path(RAILS_ROOT)
+
+puts "=> Rails application started on http://#{OPTIONS[:ip]}:#{OPTIONS[:port]}"
+puts "=> Ctrl-C to shutdown server; call with --help for options" if OPTIONS[:server_type] == WEBrick::SimpleServer
+DispatchServlet.dispatch(OPTIONS)
Index: lib/rails_generator/generators/applications/app/app_generator.rb
===================================================================
--- lib/rails_generator/generators/applications/app/app_generator.rb	(revision 4444)
+++ lib/rails_generator/generators/applications/app/app_generator.rb	(working copy)
@@ -1,157 +1,157 @@
-require 'rbconfig'
-
-class AppGenerator < Rails::Generator::Base
-  DEFAULT_SHEBANG = File.join(Config::CONFIG['bindir'],
-                              Config::CONFIG['ruby_install_name'])
-  
-  DATABASES = %w( mysql oracle postgresql sqlite2 sqlite3 )
-  
-  default_options   :db => "mysql", :shebang => DEFAULT_SHEBANG, :freeze => false
-  mandatory_options :source => "#{File.dirname(__FILE__)}/../../../../.."
-
-  def initialize(runtime_args, runtime_options = {})
-    super
-    usage if args.empty?
-    usage("Databases supported for preconfiguration are: #{DATABASES.join(", ")}") if (options[:db] && !DATABASES.include?(options[:db]))
-    @destination_root = args.shift
-  end
-
-  def manifest
-    # Use /usr/bin/env if no special shebang was specified
-    script_options     = { :chmod => 0755, :shebang => options[:shebang] == DEFAULT_SHEBANG ? nil : options[:shebang] }
-    dispatcher_options = { :chmod => 0755, :shebang => options[:shebang] }
-
-    record do |m|
-      # Root directory and all subdirectories.
-      m.directory ''
-      BASEDIRS.each { |path| m.directory path }
-
-      # Root
-      m.file "fresh_rakefile", "Rakefile"
-      m.file "README",         "README"
-
-      # Application
-      m.template "helpers/application.rb",        "app/controllers/application.rb"
-      m.template "helpers/application_helper.rb", "app/helpers/application_helper.rb"
-      m.template "helpers/test_helper.rb",        "test/test_helper.rb"
-
-      # database.yml and .htaccess
-      m.template "configs/databases/#{options[:db]}.yml", "config/database.yml", :assigns => {
-        :app_name => File.basename(File.expand_path(@destination_root)),
-        :socket   => options[:db] == "mysql" ? mysql_socket_location : nil
-      }
-      m.template "configs/routes.rb",     "config/routes.rb"
-      m.template "configs/apache.conf",   "public/.htaccess"
-
-      # Environments
-      m.file "environments/boot.rb",    "config/boot.rb"
-      m.template "environments/environment.rb", "config/environment.rb", :assigns => { :freeze => options[:freeze] }
-      m.file "environments/production.rb",  "config/environments/production.rb"
-      m.file "environments/development.rb", "config/environments/development.rb"
-      m.file "environments/test.rb",        "config/environments/test.rb"
-
-      # Scripts
-      %w( about breakpointer console destroy generate performance/benchmarker performance/profiler process/reaper process/spawner runner server plugin ).each do |file|
-        m.file "bin/#{file}", "script/#{file}", script_options
-      end
-
-      # Dispatches
-      m.file "dispatches/dispatch.rb",   "public/dispatch.rb", dispatcher_options
-      m.file "dispatches/dispatch.rb",   "public/dispatch.cgi", dispatcher_options
-      m.file "dispatches/dispatch.fcgi", "public/dispatch.fcgi", dispatcher_options
-
-      # HTML files
-      %w(404 500 index).each do |file|
-        m.template "html/#{file}.html", "public/#{file}.html"
-      end
-      
-      m.template "html/favicon.ico",  "public/favicon.ico"
-      m.template "html/robots.txt",   "public/robots.txt"
-      m.file "html/images/rails.png", "public/images/rails.png"
-
-      # Javascripts
-      m.file "html/javascripts/prototype.js",    "public/javascripts/prototype.js"
-      m.file "html/javascripts/effects.js",      "public/javascripts/effects.js"
-      m.file "html/javascripts/dragdrop.js",     "public/javascripts/dragdrop.js"
-      m.file "html/javascripts/controls.js",     "public/javascripts/controls.js"
-      m.file "html/javascripts/application.js",  "public/javascripts/application.js"
-
-      # Docs
-      m.file "doc/README_FOR_APP", "doc/README_FOR_APP"
-
-      # Logs
-      %w(server production development test).each { |file|
-        m.file "configs/empty.log", "log/#{file}.log", :chmod => 0666
-      }
-    end
-  end
-
-  protected
-    def banner
-      "Usage: #{$0} /path/to/your/app [options]"
-    end
-
-    def add_options!(opt)
-      opt.separator ''
-      opt.separator 'Options:'
-      opt.on("-r", "--ruby=path", String,
-             "Path to the Ruby binary of your choice (otherwise scripts use env, dispatchers current path).",
-             "Default: #{DEFAULT_SHEBANG}") { |options[:shebang]| }
-
-      opt.on("-d", "--database=name", String,
-            "Preconfigure for selected database (options: mysql/oracle/postgresql/sqlite2/sqlite3).",
-            "Default: mysql") { |options[:db]| }
-
-      opt.on("-f", "--freeze", 
-            "Freeze Rails in vendor/rails from the gems generating the skeleton",
-            "Default: false") { |options[:freeze]| }
-    end
-    
-    def mysql_socket_location
-      RUBY_PLATFORM =~ /mswin32/ ? MYSQL_SOCKET_LOCATIONS.find { |f| File.exists?(f) } : nil
-    end
-
-
-  # Installation skeleton.  Intermediate directories are automatically
-  # created so don't sweat their absence here.
-  BASEDIRS = %w(
-    app/controllers
-    app/helpers
-    app/models
-    app/views/layouts
-    config/environments
-    components
-    db
-    doc
-    lib
-    lib/tasks
-    log
-    public/images
-    public/javascripts
-    public/stylesheets
-    script/performance
-    script/process
-    test/fixtures
-    test/functional
-    test/integration
-    test/mocks/development
-    test/mocks/test
-    test/unit
-    vendor
-    vendor/plugins
-    tmp/sessions
-    tmp/sockets
-    tmp/cache
-  )
-
-  MYSQL_SOCKET_LOCATIONS = [
-    "/tmp/mysql.sock",                        # default
-    "/var/run/mysqld/mysqld.sock",            # debian/gentoo
-    "/var/tmp/mysql.sock",                    # freebsd
-    "/var/lib/mysql/mysql.sock",              # fedora
-    "/opt/local/lib/mysql/mysql.sock",        # fedora
-    "/opt/local/var/run/mysqld/mysqld.sock",  # mac + darwinports + mysql
-    "/opt/local/var/run/mysql4/mysqld.sock",  # mac + darwinports + mysql4
-    "/opt/local/var/run/mysql5/mysqld.sock"   # mac + darwinports + mysql5
-  ]
-end
+require 'rbconfig'
+
+class AppGenerator < Rails::Generator::Base
+  DEFAULT_SHEBANG = File.join(Config::CONFIG['bindir'],
+                              Config::CONFIG['ruby_install_name'])
+  
+  DATABASES = %w( mysql oracle postgresql sqlite2 sqlite3 )
+  
+  default_options   :db => "mysql", :shebang => DEFAULT_SHEBANG, :freeze => false
+  mandatory_options :source => "#{File.dirname(__FILE__)}/../../../../.."
+
+  def initialize(runtime_args, runtime_options = {})
+    super
+    usage if args.empty?
+    usage("Databases supported for preconfiguration are: #{DATABASES.join(", ")}") if (options[:db] && !DATABASES.include?(options[:db]))
+    @destination_root = args.shift
+  end
+
+  def manifest
+    # Use /usr/bin/env if no special shebang was specified
+    script_options     = { :chmod => 0755, :shebang => options[:shebang] == DEFAULT_SHEBANG ? nil : options[:shebang] }
+    dispatcher_options = { :chmod => 0755, :shebang => options[:shebang] }
+
+    record do |m|
+      # Root directory and all subdirectories.
+      m.directory ''
+      BASEDIRS.each { |path| m.directory path }
+
+      # Root
+      m.file "fresh_rakefile", "Rakefile"
+      m.file "README",         "README"
+
+      # Application
+      m.template "helpers/application.rb",        "app/controllers/application.rb"
+      m.template "helpers/application_helper.rb", "app/helpers/application_helper.rb"
+      m.template "helpers/test_helper.rb",        "test/test_helper.rb"
+
+      # database.yml and .htaccess
+      m.template "configs/databases/#{options[:db]}.yml", "config/database.yml", :assigns => {
+        :app_name => File.basename(File.expand_path(@destination_root)),
+        :socket   => options[:db] == "mysql" ? mysql_socket_location : nil
+      }
+      m.template "configs/routes.rb",     "config/routes.rb"
+      m.template "configs/apache.conf",   "public/.htaccess"
+
+      # Environments
+      m.file "environments/boot.rb",    "config/boot.rb"
+      m.template "environments/environment.rb", "config/environment.rb", :assigns => { :freeze => options[:freeze] }
+      m.file "environments/production.rb",  "config/environments/production.rb"
+      m.file "environments/development.rb", "config/environments/development.rb"
+      m.file "environments/test.rb",        "config/environments/test.rb"
+
+      # Scripts
+      %w( about breakpointer console destroy generate performance/benchmarker performance/profiler process/reaper process/spawner runner server plugin ).each do |file|
+        m.file "bin/#{file}", "script/#{file}", script_options
+      end
+
+      # Dispatches
+      m.file "dispatches/dispatch.rb",   "public/dispatch.rb", dispatcher_options
+      m.file "dispatches/dispatch.rb",   "public/dispatch.cgi", dispatcher_options
+      m.file "dispatches/dispatch.fcgi", "public/dispatch.fcgi", dispatcher_options
+
+      # HTML files
+      %w(404 500 index).each do |file|
+        m.template "html/#{file}.html", "public/#{file}.html"
+      end
+      
+      m.template "html/favicon.ico",  "public/favicon.ico"
+      m.template "html/robots.txt",   "public/robots.txt"
+      m.file "html/images/rails.png", "public/images/rails.png"
+
+      # Javascripts
+      m.file "html/javascripts/prototype.js",    "public/javascripts/prototype.js"
+      m.file "html/javascripts/effects.js",      "public/javascripts/effects.js"
+      m.file "html/javascripts/dragdrop.js",     "public/javascripts/dragdrop.js"
+      m.file "html/javascripts/controls.js",     "public/javascripts/controls.js"
+      m.file "html/javascripts/application.js",  "public/javascripts/application.js"
+
+      # Docs
+      m.file "doc/README_FOR_APP", "doc/README_FOR_APP"
+
+      # Logs
+      %w(server production development test).each { |file|
+        m.file "configs/empty.log", "log/#{file}.log", :chmod => 0666
+      }
+    end
+  end
+
+  protected
+    def banner
+      "Usage: #{$0} /path/to/your/app [options]"
+    end
+
+    def add_options!(opt)
+      opt.separator ''
+      opt.separator 'Options:'
+      opt.on("-r", "--ruby=path", String,
+             "Path to the Ruby binary of your choice (otherwise scripts use env, dispatchers current path).",
+             "Default: #{DEFAULT_SHEBANG}") { |v| options[:shebang] = v }
+
+      opt.on("-d", "--database=name", String,
+            "Preconfigure for selected database (options: mysql/oracle/postgresql/sqlite2/sqlite3).",
+            "Default: mysql") { |v| options[:db] = v }
+
+      opt.on("-f", "--freeze", 
+            "Freeze Rails in vendor/rails from the gems generating the skeleton",
+            "Default: false") { |v| options[:freeze] = v }
+    end
+    
+    def mysql_socket_location
+      RUBY_PLATFORM =~ /mswin32/ ? MYSQL_SOCKET_LOCATIONS.find { |f| File.exists?(f) } : nil
+    end
+
+
+  # Installation skeleton.  Intermediate directories are automatically
+  # created so don't sweat their absence here.
+  BASEDIRS = %w(
+    app/controllers
+    app/helpers
+    app/models
+    app/views/layouts
+    config/environments
+    components
+    db
+    doc
+    lib
+    lib/tasks
+    log
+    public/images
+    public/javascripts
+    public/stylesheets
+    script/performance
+    script/process
+    test/fixtures
+    test/functional
+    test/integration
+    test/mocks/development
+    test/mocks/test
+    test/unit
+    vendor
+    vendor/plugins
+    tmp/sessions
+    tmp/sockets
+    tmp/cache
+  )
+
+  MYSQL_SOCKET_LOCATIONS = [
+    "/tmp/mysql.sock",                        # default
+    "/var/run/mysqld/mysqld.sock",            # debian/gentoo
+    "/var/tmp/mysql.sock",                    # freebsd
+    "/var/lib/mysql/mysql.sock",              # fedora
+    "/opt/local/lib/mysql/mysql.sock",        # fedora
+    "/opt/local/var/run/mysqld/mysqld.sock",  # mac + darwinports + mysql
+    "/opt/local/var/run/mysql4/mysqld.sock",  # mac + darwinports + mysql4
+    "/opt/local/var/run/mysql5/mysqld.sock"   # mac + darwinports + mysql5
+  ]
+end
Index: lib/rails_generator/generators/components/model/model_generator.rb
===================================================================
--- lib/rails_generator/generators/components/model/model_generator.rb	(revision 4444)
+++ lib/rails_generator/generators/components/model/model_generator.rb	(working copy)
@@ -1,34 +1,34 @@
-class ModelGenerator < Rails::Generator::NamedBase
-  default_options :skip_migration => false
-
-  def manifest
-    record do |m|
-      # Check for class naming collisions.
-      m.class_collisions class_path, class_name, "#{class_name}Test"
-
-      # Model, test, and fixture directories.
-      m.directory File.join('app/models', class_path)
-      m.directory File.join('test/unit', class_path)
-      m.directory File.join('test/fixtures', class_path)
-
-      # Model class, unit test, and fixtures.
-      m.template 'model.rb',      File.join('app/models', class_path, "#{file_name}.rb")
-      m.template 'unit_test.rb',  File.join('test/unit', class_path, "#{file_name}_test.rb")
-      m.template 'fixtures.yml',  File.join('test/fixtures', class_path, "#{table_name}.yml")
-
-      unless options[:skip_migration]
-        m.migration_template 'migration.rb', 'db/migrate', :assigns => {
-          :migration_name => "Create#{class_name.pluralize.gsub(/::/, '')}"
-        }, :migration_file_name => "create_#{file_path.gsub(/\//, '_').pluralize}"
-      end
-    end
-  end
-
-  protected
-    def add_options!(opt)
-      opt.separator ''
-      opt.separator 'Options:'
-      opt.on("--skip-migration", 
-             "Don't generate a migration file for this model") { |options[:skip_migration]| }
-    end
-end
+class ModelGenerator < Rails::Generator::NamedBase
+  default_options :skip_migration => false
+
+  def manifest
+    record do |m|
+      # Check for class naming collisions.
+      m.class_collisions class_path, class_name, "#{class_name}Test"
+
+      # Model, test, and fixture directories.
+      m.directory File.join('app/models', class_path)
+      m.directory File.join('test/unit', class_path)
+      m.directory File.join('test/fixtures', class_path)
+
+      # Model class, unit test, and fixtures.
+      m.template 'model.rb',      File.join('app/models', class_path, "#{file_name}.rb")
+      m.template 'unit_test.rb',  File.join('test/unit', class_path, "#{file_name}_test.rb")
+      m.template 'fixtures.yml',  File.join('test/fixtures', class_path, "#{table_name}.yml")
+
+      unless options[:skip_migration]
+        m.migration_template 'migration.rb', 'db/migrate', :assigns => {
+          :migration_name => "Create#{class_name.pluralize.gsub(/::/, '')}"
+        }, :migration_file_name => "create_#{file_path.gsub(/\//, '_').pluralize}"
+      end
+    end
+  end
+
+  protected
+    def add_options!(opt)
+      opt.separator ''
+      opt.separator 'Options:'
+      opt.on("--skip-migration", 
+             "Don't generate a migration file for this model") { |v| options[:skip_migration] = v }
+    end
+end
Index: lib/rails_generator/options.rb
===================================================================
--- lib/rails_generator/options.rb	(revision 4444)
+++ lib/rails_generator/options.rb	(working copy)
@@ -1,140 +1,140 @@
-require 'optparse'
-
-module Rails
-  module Generator
-    module Options
-      def self.append_features(base)
-        super
-        base.extend(ClassMethods)
-        class << base
-          if respond_to?(:inherited)
-            alias_method :inherited_without_options, :inherited
-          end
-          alias_method :inherited, :inherited_with_options
-        end
-      end
-
-      module ClassMethods
-        def inherited_with_options(sub)
-          inherited_without_options(sub) if respond_to?(:inherited_without_options)
-          sub.extend(Rails::Generator::Options::ClassMethods)
-        end
-
-        def mandatory_options(options = nil)
-          if options
-            write_inheritable_attribute(:mandatory_options, options)
-          else
-            read_inheritable_attribute(:mandatory_options) or write_inheritable_attribute(:mandatory_options, {})
-          end
-        end
-
-        def default_options(options = nil)
-          if options
-            write_inheritable_attribute(:default_options, options)
-          else
-            read_inheritable_attribute(:default_options) or write_inheritable_attribute(:default_options, {})
-          end
-        end
-
-        # Merge together our class options.  In increasing precedence:
-        #   default_options   (class default options)
-        #   runtime_options   (provided as argument)
-        #   mandatory_options (class mandatory options)
-        def full_options(runtime_options = {})
-          default_options.merge(runtime_options).merge(mandatory_options)
-        end
-
-      end
-
-      # Each instance has an options hash that's populated by #parse.
-      def options
-        @options ||= {}
-      end
-      attr_writer :options
-
-      protected
-        # Convenient access to class mandatory options.
-        def mandatory_options
-          self.class.mandatory_options
-        end
-
-        # Convenient access to class default options.
-        def default_options
-          self.class.default_options
-        end
-
-        # Merge together our instance options.  In increasing precedence:
-        #   default_options   (class default options)
-        #   options           (instance options)
-        #   runtime_options   (provided as argument)
-        #   mandatory_options (class mandatory options)
-        def full_options(runtime_options = {})
-          self.class.full_options(options.merge(runtime_options))
-        end
-
-        # Parse arguments into the options hash.  Classes may customize
-        # parsing behavior by overriding these methods:
-        #   #banner                 Usage: ./script/generate [options]
-        #   #add_options!           Options:
-        #                             some options..
-        #   #add_general_options!   General Options:
-        #                             general options..
-        def parse!(args, runtime_options = {})
-          self.options = {}
-
-          @option_parser = OptionParser.new do |opt|
-            opt.banner = banner
-            add_options!(opt)
-            add_general_options!(opt)
-            opt.parse!(args)
-          end
-
-          return args
-        ensure
-          self.options = full_options(runtime_options)
-        end
-
-        # Raise a usage error.  Override usage_message to provide a blurb
-        # after the option parser summary.
-        def usage(message = usage_message)
-          raise UsageError, "#{@option_parser}\n#{message}"
-        end
-
-        def usage_message
-          ''
-        end
-
-        # Override with your own usage banner.
-        def banner
-          "Usage: #{$0} [options]"
-        end
-
-        # Override to add your options to the parser:
-        #   def add_options!(opt)
-        #     opt.on('-v', '--verbose') { |value| options[:verbose] = value }
-        #   end
-        def add_options!(opt)
-        end
-
-        # Adds general options like -h and --quiet.  Usually don't override.
-        def add_general_options!(opt)
-          opt.separator ''
-          opt.separator 'General Options:'
-
-          opt.on('-p', '--pretend', 'Run but do not make any changes.') { |options[:pretend]| }
-          opt.on('-f', '--force', 'Overwrite files that already exist.') { options[:collision] = :force }
-          opt.on('-s', '--skip', 'Skip files that already exist.') { options[:collision] = :skip }
-          opt.on('-q', '--quiet', 'Suppress normal output.') { |options[:quiet]| }
-          opt.on('-t', '--backtrace', 'Debugging: show backtrace on errors.') { |options[:backtrace]| }
-          opt.on('-h', '--help', 'Show this help message.') { |options[:help]| }
-          opt.on('-c', '--svn', 'Modify files with subversion. (Note: svn must be in path)') do
-            options[:svn] = `svn status`.inject({}) do |opt, e|
-              opt[e.chomp[7..-1]] = true
-              opt
-            end
-          end
-        end
-
-    end
-  end
-end
+require 'optparse'
+
+module Rails
+  module Generator
+    module Options
+      def self.append_features(base)
+        super
+        base.extend(ClassMethods)
+        class << base
+          if respond_to?(:inherited)
+            alias_method :inherited_without_options, :inherited
+          end
+          alias_method :inherited, :inherited_with_options
+        end
+      end
+
+      module ClassMethods
+        def inherited_with_options(sub)
+          inherited_without_options(sub) if respond_to?(:inherited_without_options)
+          sub.extend(Rails::Generator::Options::ClassMethods)
+        end
+
+        def mandatory_options(options = nil)
+          if options
+            write_inheritable_attribute(:mandatory_options, options)
+          else
+            read_inheritable_attribute(:mandatory_options) or write_inheritable_attribute(:mandatory_options, {})
+          end
+        end
+
+        def default_options(options = nil)
+          if options
+            write_inheritable_attribute(:default_options, options)
+          else
+            read_inheritable_attribute(:default_options) or write_inheritable_attribute(:default_options, {})
+          end
+        end
+
+        # Merge together our class options.  In increasing precedence:
+        #   default_options   (class default options)
+        #   runtime_options   (provided as argument)
+        #   mandatory_options (class mandatory options)
+        def full_options(runtime_options = {})
+          default_options.merge(runtime_options).merge(mandatory_options)
+        end
+
+      end
+
+      # Each instance has an options hash that's populated by #parse.
+      def options
+        @options ||= {}
+      end
+      attr_writer :options
+
+      protected
+        # Convenient access to class mandatory options.
+        def mandatory_options
+          self.class.mandatory_options
+        end
+
+        # Convenient access to class default options.
+        def default_options
+          self.class.default_options
+        end
+
+        # Merge together our instance options.  In increasing precedence:
+        #   default_options   (class default options)
+        #   options           (instance options)
+        #   runtime_options   (provided as argument)
+        #   mandatory_options (class mandatory options)
+        def full_options(runtime_options = {})
+          self.class.full_options(options.merge(runtime_options))
+        end
+
+        # Parse arguments into the options hash.  Classes may customize
+        # parsing behavior by overriding these methods:
+        #   #banner                 Usage: ./script/generate [options]
+        #   #add_options!           Options:
+        #                             some options..
+        #   #add_general_options!   General Options:
+        #                             general options..
+        def parse!(args, runtime_options = {})
+          self.options = {}
+
+          @option_parser = OptionParser.new do |opt|
+            opt.banner = banner
+            add_options!(opt)
+            add_general_options!(opt)
+            opt.parse!(args)
+          end
+
+          return args
+        ensure
+          self.options = full_options(runtime_options)
+        end
+
+        # Raise a usage error.  Override usage_message to provide a blurb
+        # after the option parser summary.
+        def usage(message = usage_message)
+          raise UsageError, "#{@option_parser}\n#{message}"
+        end
+
+        def usage_message
+          ''
+        end
+
+        # Override with your own usage banner.
+        def banner
+          "Usage: #{$0} [options]"
+        end
+
+        # Override to add your options to the parser:
+        #   def add_options!(opt)
+        #     opt.on('-v', '--verbose') { |value| options[:verbose] = value }
+        #   end
+        def add_options!(opt)
+        end
+
+        # Adds general options like -h and --quiet.  Usually don't override.
+        def add_general_options!(opt)
+          opt.separator ''
+          opt.separator 'General Options:'
+
+          opt.on('-p', '--pretend', 'Run but do not make any changes.') { |v| options[:pretend] = v }
+          opt.on('-f', '--force', 'Overwrite files that already exist.') { options[:collision] = :force }
+          opt.on('-s', '--skip', 'Skip files that already exist.') { options[:collision] = :skip }
+          opt.on('-q', '--quiet', 'Suppress normal output.') { |v| options[:quiet] = v }
+          opt.on('-t', '--backtrace', 'Debugging: show backtrace on errors.') { |v| options[:backtrace] = v }
+          opt.on('-h', '--help', 'Show this help message.') { |v| options[:help] = v }
+          opt.on('-c', '--svn', 'Modify files with subversion. (Note: svn must be in path)') do
+            options[:svn] = `svn status`.inject({}) do |opt, e|
+              opt[e.chomp[7..-1]] = true
+              opt
+            end
+          end
+        end
+
+    end
+  end
+end

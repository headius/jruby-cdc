<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="jar" name="JRuby">
  	<description>
    	JRuby is a pure Java implementation of a Ruby interpreter.
  	</description>

	<!-- First try to load machine-specific properties. -->
	<property file="build.properties"/>

	<!-- And then load the defaults. It seems backwards to set defaults AFTER 
		 setting local overrides, but that's how Ant works. -->
	<property file="default.build.properties"/>

  	<path id="build.classpath">
    	<fileset dir="${lib.dir}" includes="*.jar" excludes="jruby.jar"/>
  	</path>

  	<patternset id="java.src.pattern">
    	<include name="**/*.java"/>
    	<exclude unless="bsf.present" name="org/jruby/javasupport/bsf/**/*.java"/>
    	<exclude unless="oro.present" name="**/ORORegexpAdapter.java"/>
    	<exclude unless="jdk1.4+" name="**/JDKRegexpAdapter.java"/>
    	<exclude unless="jdk1.4+" name="**/XmlAstMarshal.java"/>
    	<exclude unless="jdk1.4+" name="**/AstPersistenceDelegates.java"/>
    	<exclude unless="gnuregexp.present" name="**/GNURegexpAdapter.java"/>
        <exclude unless="cglib.present" name="**/Cglib*.java"/>
  	</patternset>

  	<patternset id="ruby.src.pattern">
    	<include name="**/*.rb"/>
  	</patternset>
		
  	<patternset id="other.src.pattern">
    	<include name="**/*.properties"/>
  	</patternset>

  	<target name="init" description="initialize the build">
    	<xmlproperty file="build-config.xml" keepRoot="false" collapseAttributes="true"/>
    	<tstamp>
      		<format property="build.date" pattern="yyyy-MM-dd"/>
    	</tstamp>
    	<property name="version.ruby" value="${version.ruby.major}.${version.ruby.minor}"/>
  	</target>

	<target name="prepare" depends="init" 
		description="Creates the directories needed for building">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${jruby.classes.dir}"/>
    	<mkdir dir="${test.classes.dir}"/>
		<mkdir dir="${gen-src.dir}"/>
		<mkdir dir="${test.results.dir}"/>
		<mkdir dir="${html.test.results.dir}"/>
		<mkdir dir="${docs.dir}"/>
		<mkdir dir="${api.docs.dir}"/>
	</target>

  	<target name="check-for-optional-packages"
          	description="check if specific libs and versions are avaiable"
          	depends="init">
    	<available property="jdk1.4+"
               	classname="java.lang.CharSequence"/>
    	<available property="bsf.present"
               	classname="org.apache.bsf.BSFManager"
               	classpathref="build.classpath"/>
    	<available property="junit.present"
               	classname="junit.framework.TestCase"
               	classpathref="build.classpath"/>
    	<available property="oro.present"
               	classname="org.apache.oro.text.regex.Perl5Pattern"
               	classpathref="build.classpath"/>
    	<available property="gnuregexp.present"
               	classname="gnu.regexp.RE"
	       		classpathref="build.classpath"/>
        <available property="cglib.present"
                classname="net.sf.cglib.reflect.FastClass"
				classpathref="build.classpath"/>
  	</target>

	<target name="compile.tasks" depends="prepare"
		description="Builds the Ant tasks that we need later on in the build">
    	<javac destdir="${jruby.classes.dir}" debug="true"
			srcdir="${src.dir}"
      		includes="org/jruby/util/ant/**/*.java">
      		<classpath refid="build.classpath"/>
    	</javac>

    	<taskdef name="jruby-serialize" classname="org.jruby.util.ant.JRubySerialize">
			<classpath path="${jruby.classes.dir}"/>
    	</taskdef>

		<copy todir="${jruby.classes.dir}">
			<fileset dir="${src.dir}" includes="**/*.properties"/>
		</copy>
	</target>

	<target name="copy.with.expansion" depends="compile.tasks, check-for-optional-packages"
		description="Copy those files who need variables expanded">
		<copy todir="${gen-src.dir}">
			<fileset dir="${src.dir}" includes="**/Constants.java"/>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>

  	<target name="compile" depends="copy.with.expansion"
		description="Compile the source files for the project.">
        <javac destdir="${jruby.classes.dir}" debug="true">
           <classpath refid="build.classpath"/>
           <src path="${gen-src.dir}"/>
           <include name="**/Constants.java"/>
        </javac>
 
        <javac destdir="${jruby.classes.dir}" debug="true">
           <classpath refid="build.classpath"/>
           <src path="${src.dir}"/>
           <src path="${gen-src.dir}"/>
           <patternset refid="java.src.pattern"/>
           <exclude name="**/Constants.java"/>
        </javac>
  	</target>

	<target name="serialize" depends="compile"
		description="Serializes the core Ruby library into Java format">
    	<jruby-serialize destdir="${jruby.classes.dir}">
      		<fileset dir="${src.dir}">
        		<patternset refid="ruby.src.pattern"/>
      		</fileset>
    	</jruby-serialize>
	</target>

  	<target name="jar" depends="serialize"
		description="Create the jruby.jar file">
    	<jar destfile="${lib.dir}/jruby.jar">
      		<fileset dir="${jruby.classes.dir}">
        		<include name="**/*.class"/>
	    		<include name="**/*.properties"/>
	    		<include name="**/*.rb.ast.ser"/>
			<exclude name="org/jruby/util/ant/**/*.class"/>
      		</fileset>
      		<manifest>
        		<attribute name="Built-By" value="${user.name}"/>
        		<attribute name="Main-Class" value="org.jruby.Main"/>
      		</manifest>
    	</jar>
  	</target>
  
  	<target name="compile-test" depends="jar" 
		description="Compile the unit tests">
    	<javac destdir="${test.classes.dir}" deprecation="true" debug="true">
      		<classpath>
        		<path refid="build.classpath"/>
				<pathelement path="${jruby.classes.dir}"/>
        		<pathelement path="${lib.dir}/jruby.jar"/>
      		</classpath>
      		<src path="${test.dir}"/>
      		<patternset refid="java.src.pattern"/>
    	</javac>
  	</target>

  	<target name="create-test-jar" depends="compile-test" 
		description="Create a jar file containing just the tests.">
    	<jar destfile="${test.dir}/test.jar">
      		<fileset dir="${test.classes.dir}" includes="**/*.class"/>
      		<fileset dir="${test.dir}" includes="org/**/*.rb"/>
      		<manifest>
        		<attribute name="Built-By" value="${user.name}"/>
      		</manifest>
    	</jar>
  	</target>
  
  	<target name="test" depends="create-test-jar"
		description="runs junit tests">
    	<junit fork="yes" haltonfailure="false" dir="${basedir}">
      		<classpath>
        		<path refid="build.classpath"/>
        		<pathelement path="${lib.dir}/jruby.jar"/>
        		<pathelement path="${test.dir}/test.jar"/>
      		</classpath>
      		<sysproperty key="jruby.base" value="${basedir}"/>
      		<sysproperty key="jruby.home" value="${basedir}"/>
      		<sysproperty key="jruby.lib" value="${lib.dir}"/>

      		<formatter type="xml"/>
      		<formatter type="brief" usefile="false"/>

      		<test name="org.jruby.test.MainTestSuite" todir="${test.results.dir}"/>
    	</junit>

    	<junitreport todir="${test.results.dir}">
      		<fileset dir="${test.results.dir}" includes="TEST-*.xml"/>
      		<report format="frames" todir="${html.test.results.dir}"/>
    	</junitreport>
  	</target>
  
  	<target name="create-apidocs" depends="prepare" 
		description="Creates the Java API docs">
    	<javadoc destdir="${api.docs.dir}" author="true" version="true" use="true" windowtitle="JRuby API">
      		<fileset dir="${src.dir}"/>
      		<fileset dir="${test.dir}"/>
      		<doctitle><![CDATA[<h1>JRuby</h1>]]></doctitle>
      		<bottom><![CDATA[<i>Copyright &#169; 2002 Jan Arne Petersen. All Rights Reserved.</i>]]></bottom>
    	</javadoc>
  	</target>
  	
        <!-- dist-bin and dist-src use a very common tarfileset...
             Can tarfileset be referenced? -->
  	<target name="dist-bin" depends="jar">
  		<tar destfile="jruby-bin-${version.jruby}.tar.gz" 
                     compression="gzip">
  		     <tarfileset dir="." mode="755"
                                 prefix="jruby-${version.jruby}">
	   	         <include name="bin/**"/>
                     </tarfileset>
  		     <tarfileset dir="." prefix="jruby-${version.jruby}">
	   	         <include name="lib/**"/>
	   	         <include name="samples/**"/>
	   	         <include name="docs/**"/>
                         <include name="COPYING*"/>
                         <include name="README"/>
                         <!-- Just in case we have link to real ruby dist -->
                         <exclude name="lib/ruby/**"/>
                         <exclude name="lib/ant.jar"/>
   		     </tarfileset>
  		</tar>
  	</target>

	<target name="dist-src" depends="jar">
  		<tar destfile="jruby-src-${version.jruby}.tar.gz" 
		     compression="gzip">
  		     <tarfileset dir="." mode="755"
                                 prefix="jruby-${version.jruby}">
	   	         <include name="bin/**"/>
                     </tarfileset>
  		     <tarfileset dir="." prefix="jruby-${version.jruby}">
	   	         <include name="lib/**"/>
	   	         <include name="samples/**"/>
	   	         <include name="docs/**"/>
                         <include name="src/**"/>
                         <include name="test/**"/>
                         <include name="build.xml"/>
                         <include name="build-config.xml"/>
                         <include name="COPYING*"/>
                         <include name="README"/>
                         <include name=".project"/>
                         <include name=".classpath"/>
                         <include name="default.build.properties"/>
                         <!-- Just in case we have link to real ruby dist -->
                         <exclude name="lib/ruby/**"/>
                         <exclude name="lib/jruby.jar"/>
   		     </tarfileset>
  		</tar>
	</target>
	
	<target name="dist" depends="dist-bin,dist-src">
	</target>
	  
  	<target name="clean" depends="init"
		description="clean almost everything">
		<delete dir="${build.dir}"/>
      	<delete file="${test.dir}/test.jar" quiet="true"/>
      	<delete file="${lib.dir}/jruby.jar" quiet="true"/>
		<delete dir="${api.docs.dir}"/>
  	</target>
</project>

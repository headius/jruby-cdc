/* Generated - do not edit! */

package some.place.to.put.definitions;

import org.jruby.Ruby;
import org.jruby.RubyClass;
import org.jruby.RubyModule;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.runtime.builtin.definitions.MethodContext;
import org.jruby.runtime.builtin.definitions.SingletonMethodContext;
import org.jruby.runtime.builtin.definitions.ModuleDefinition;
import org.jruby.runtime.builtin.definitions.ClassDefinition;
import org.jruby.runtime.builtin.definitions.ModuleFunctionsContext;
import org.jruby.util.Asserts;

public class FooDefinition extends ClassDefinition {
private static final int FOO = 0xf000;
private static final int STATIC = FOO | 0x100;
public static final int SOME_METHOD = FOO | 1;
public static final int SOMEOTHERMETHOD = FOO | 2;
public static final int OPTIONAL_METHOD = FOO | 3;
public static final int ALPHA = STATIC | 1;
public static final int BETA = STATIC | 2;

public FooDefinition(Ruby runtime) {
super(runtime);
}

protected RubyClass createType(Ruby runtime) {
return runtime.defineClass("Foo", (RubyClass) runtime.getClasses().getClass("FooTemplate"));
}

protected void defineMethods(MethodContext context) {
context.create("some_method", SOME_METHOD, 2);
context.create("some_other_method", SOMEOTHERMETHOD, 0);
context.createOptional("optional_method", OPTIONAL_METHOD, 1);
context.createOptional("op2", OPTIONAL_METHOD, 1);
context.undefineMethod("whoah");
}

protected void defineSingletonMethods(SingletonMethodContext context) {
context.create("alpha", ALPHA, 2);
context.create("beta", BETA, 0);
}

public IRubyObject callIndexed(int index, IRubyObject receiver, IRubyObject[] args) {
switch (index) {
case ALPHA :
return org.stuff.Foo.alpha(receiver, args[0], args[1]);
case BETA :
return org.stuff.Foo.beta(receiver);
default :
Asserts.notReached();
return null;
}
}
}

/*
 * TestUnitTestSuite.java
 * JUnit based test
 *
 * Created on January 15, 2007, 4:06 PM
 */

package org.jruby.test;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import junit.framework.TestCase;
import junit.framework.*;
import org.jruby.IRuby;
import org.jruby.Ruby;
import org.jruby.RubyArray;
import org.jruby.RubyString;
import org.jruby.exceptions.MainExitException;
import org.jruby.exceptions.RaiseException;
import org.jruby.javasupport.JavaUtil;

/**
 *
 * @author headius
 */
public class TestUnitTestSuite extends TestCase {
    private static final String TEST_DIR = "test";
    private static final String TEST_INDEX = "test" + File.separator + "test_unit_index";
    
    public TestUnitTestSuite(String testName) {
        super(testName);
    }

    /**
     * suite method automatically generated by JUnit module
     */
    public static Test suite() throws Exception {
        TestSuite suite = new TestSuite();

        File testIndex = new File(TEST_INDEX);

        if (!testIndex.canRead()) {
            // Since we don't have any other error reporting mechanism, we
            // add the error message as an always-failing test to the test suite.
            suite.addTest(new FailingTest("TestUnitTestSuite",
                                          "Couldn't locate " + TEST_INDEX +
                                          ". Make sure you run the tests from the base " +
                                          "directory of the JRuby sourcecode."));
            return suite;
        }

        BufferedReader testFiles =
            new BufferedReader(new InputStreamReader(new FileInputStream(testIndex)));
        
        String line;
        while ((line = testFiles.readLine()) != null) {
            line = line.trim();
            if (line.startsWith("#") || line.length() == 0) {
                continue;
            }
            
            suite.addTest(new ScriptTest(line));
        }

        return suite;
    }

    private static class ScriptTest extends TestCase {
        private ByteArrayInputStream in;
        private ByteArrayOutputStream out;
        private PrintStream printOut;
        private ByteArrayOutputStream err;
        private PrintStream printErr;
        private IRuby runtime;
        private final String filename;

        public ScriptTest(String filename) {
            super(filename);
            this.filename = filename;
        }

        protected void setUp() throws Exception {
            in = new ByteArrayInputStream(new byte[0]);
            out = new ByteArrayOutputStream();
            err = new ByteArrayOutputStream();
            runtime = Ruby.newInstance(in, printOut = new PrintStream(out), printErr = new PrintStream(err));
            setupInterpreter(runtime);
        }

        protected void tearDown() throws Exception {
            in.close();
            out.close();
            err.close();
            printOut.close();
            printErr.close();
            
            in = null;
            out = null;
            err = null;
            printOut = null;
            printErr = null;
            runtime = null;
        }

        private void setupInterpreter(IRuby runtime) {
            runtime.getLoadService().init(new ArrayList());
            runtime.defineGlobalConstant("ARGV", runtime.newArray());
        }

		private String scriptName() {
			return new File(TEST_DIR + File.separator + filename).getPath();
		}
        
        private String pretty(List list) {
            StringBuffer prettyOut = new StringBuffer();

            for (Iterator iter = list.iterator(); iter.hasNext();) {
                prettyOut.append(iter.next().toString());
            }
            
            return prettyOut.toString();
        }

        public void runTest() throws Throwable {
        	StringBuffer script = new StringBuffer();
        	
            try {
                script.append("require 'test/junit_testrunner.rb'\n");
                script.append("require '" + scriptName() + "'\n");
                String classname = filename;
                if (classname.lastIndexOf('/') != -1) {
                    classname = filename.substring(filename.lastIndexOf('/') + 1);
                }
                script.append("runner = Test::Unit::UI::JUnit::TestRunner.new(eval('" + classname + "'.split('_').each {|s| s.capitalize! }.join))\n");
                script.append("runner.start\n");
                script.append("runner.faults\n");
                
                RubyArray faults = (RubyArray)runtime.evalScript(script.toString());
                
                if (!faults.isEmpty()) {
                    StringBuffer faultString = new StringBuffer("Faults encountered running " + scriptName() + ", complete output follows:\n");
                    for (Iterator iter = faults.iterator(); iter.hasNext();) {
                        String fault = iter.next().toString();
                        
                        faultString.append(fault).append("\n");
                    }
                
                    fail(faultString.toString());
                }
            } catch (RaiseException re) {
                fail("Faults encountered running " + scriptName() + ", complete output follows:\n" + re.getException().message + "\n" + pretty(((RubyArray)re.getException().backtrace()).getList()));
            }
        }
    }
}

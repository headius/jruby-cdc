--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Open a CSV formatted file for reading or writing.
- !ruby/struct:SM::Flow::P 
  body: For reading.
- !ruby/struct:SM::Flow::P 
  body: EXAMPLE 1
- !ruby/struct:SM::Flow::VERB 
  body: "  CSV.open('csvfile.csv', 'r') do |row|\n    p row\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: EXAMPLE 2
- !ruby/struct:SM::Flow::VERB 
  body: "  reader = CSV.open('csvfile.csv', 'r')\n  row1 = reader.shift\n  row2 = reader.shift\n  if row2.empty?\n    p 'row2 not find.'\n  end\n  reader.close\n"
- !ruby/struct:SM::Flow::P 
  body: ARGS
- !ruby/struct:SM::Flow::VERB 
  body: "  filename: filename to parse.\n  col_sep: Column separator.  ?, by default.  If you want to separate\n    fields with semicolon, give ?; here.\n  row_sep: Row separator.  nil by default.  nil means &quot;\\r\\n or \\n&quot;.  If you\n    want to separate records with \\r, give ?\\r here.\n"
- !ruby/struct:SM::Flow::P 
  body: RETURNS
- !ruby/struct:SM::Flow::VERB 
  body: "  reader instance.  To get parse result, see CSV::Reader#each.\n"
- !ruby/struct:SM::Flow::P 
  body: For writing.
- !ruby/struct:SM::Flow::P 
  body: EXAMPLE 1
- !ruby/struct:SM::Flow::VERB 
  body: "  CSV.open('csvfile.csv', 'w') do |writer|\n    writer &lt;&lt; ['r1c1', 'r1c2']\n    writer &lt;&lt; ['r2c1', 'r2c2']\n    writer &lt;&lt; [nil, nil]\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: EXAMPLE 2
- !ruby/struct:SM::Flow::VERB 
  body: "  writer = CSV.open('csvfile.csv', 'w')\n  writer &lt;&lt; ['r1c1', 'r1c2'] &lt;&lt; ['r2c1', 'r2c2'] &lt;&lt; [nil, nil]\n  writer.close\n"
- !ruby/struct:SM::Flow::P 
  body: ARGS
- !ruby/struct:SM::Flow::VERB 
  body: "  filename: filename to generate.\n  col_sep: Column separator.  ?, by default.  If you want to separate\n    fields with semicolon, give ?; here.\n  row_sep: Row separator.  nil by default.  nil means &quot;\\r\\n or \\n&quot;.  If you\n    want to separate records with \\r, give ?\\r here.\n"
- !ruby/struct:SM::Flow::P 
  body: RETURNS
- !ruby/struct:SM::Flow::VERB 
  body: "  writer instance.  See CSV::Writer#&lt;&lt; and CSV::Writer#add_row to know how\n  to generate CSV string.\n"
full_name: CSV::open
is_singleton: true
name: open
params: (path, mode, fs = nil, rs = nil, &block)
visibility: public

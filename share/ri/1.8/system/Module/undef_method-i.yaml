--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Prevents the current class from responding to calls to the named method. Contrast this with <tt>remove_method</tt>, which deletes the method from the particular class; Ruby will still search superclasses and mixed-in modules for a possible receiver.
- !ruby/struct:SM::Flow::VERB 
  body: "   class Parent\n     def hello\n       puts &quot;In parent&quot;\n     end\n   end\n   class Child &lt; Parent\n     def hello\n       puts &quot;In child&quot;\n     end\n   end\n\n   c = Child.new\n   c.hello\n\n   class Child\n     remove_method :hello  # remove from child, still in parent\n   end\n   c.hello\n\n   class Child\n     undef_method :hello   # prevent any calls to 'hello'\n   end\n   c.hello\n"
- !ruby/struct:SM::Flow::P 
  body: <em>produces:</em>
- !ruby/struct:SM::Flow::VERB 
  body: "   In child\n   In parent\n   prog.rb:23: undefined method `hello' for #&lt;Child:0x401b3bb4&gt; (NoMethodError)\n"
full_name: Module#undef_method
is_singleton: false
name: undef_method
params: |
  undef_method(symbol)    => self

visibility: public

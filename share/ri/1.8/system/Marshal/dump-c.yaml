--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Serializes obj and all descendent objects. If anIO is specified, the serialized data will be written to it, otherwise the data will be returned as a String. If limit is specified, the traversal of subobjects will be limited to that depth. If limit is negative, no checking of depth will be performed.
- !ruby/struct:SM::Flow::VERB 
  body: "    class Klass\n      def initialize(str)\n        @str = str\n      end\n      def sayHello\n        @str\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: (produces no output)
- !ruby/struct:SM::Flow::VERB 
  body: "    o = Klass.new(&quot;hello\\n&quot;)\n    data = Marshal.dump(o)\n    obj = Marshal.load(data)\n    obj.sayHello   #=&gt; &quot;hello\\n&quot;\n"
full_name: Marshal::dump
is_singleton: true
name: dump
params: |
  dump( obj [, anIO] , limit=--1 ) => anIO

visibility: public

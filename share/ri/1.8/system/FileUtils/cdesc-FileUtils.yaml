--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: collect_method
- !ruby/object:RI::MethodSummary 
  name: commands
- !ruby/object:RI::MethodSummary 
  name: have_option?
- !ruby/object:RI::MethodSummary 
  name: options
- !ruby/object:RI::MethodSummary 
  name: options_of
comment: 
- !ruby/struct:SM::Flow::H 
  level: 1
  text: fileutils.rb
- !ruby/struct:SM::Flow::P 
  body: Copyright (c) 2000-2006 Minero Aoki
- !ruby/struct:SM::Flow::P 
  body: This program is free software. You can distribute/modify this program under the same terms of ruby.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: module FileUtils
- !ruby/struct:SM::Flow::P 
  body: Namespace for several file utility methods for copying, moving, removing, etc.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Module Functions
- !ruby/struct:SM::Flow::VERB 
  body: "  cd(dir, options)\n  cd(dir, options) {|dir| .... }\n  pwd()\n  mkdir(dir, options)\n  mkdir(list, options)\n  mkdir_p(dir, options)\n  mkdir_p(list, options)\n  rmdir(dir, options)\n  rmdir(list, options)\n  ln(old, new, options)\n  ln(list, destdir, options)\n  ln_s(old, new, options)\n  ln_s(list, destdir, options)\n  ln_sf(src, dest, options)\n  cp(src, dest, options)\n  cp(list, dir, options)\n  cp_r(src, dest, options)\n  cp_r(list, dir, options)\n  mv(src, dest, options)\n  mv(list, dir, options)\n  rm(list, options)\n  rm_r(list, options)\n  rm_rf(list, options)\n  install(src, dest, mode = &lt;src's&gt;, options)\n  chmod(mode, list, options)\n  chmod_R(mode, list, options)\n  chown(user, group, list, options)\n  chown_R(user, group, list, options)\n  touch(list, options)\n"
- !ruby/struct:SM::Flow::P 
  body: The <tt>options</tt> parameter is a hash of options, taken from the list <tt>:force</tt>, <tt>:noop</tt>, <tt>:preserve</tt>, and <tt>:verbose</tt>. <tt>:noop</tt> means that no changes are made. The other two are obvious. Each method documents the options that it honours.
- !ruby/struct:SM::Flow::P 
  body: All methods that have the concept of a &quot;source&quot; file or directory can take either one file or a list of files in that argument. See the method documentation for examples.
- !ruby/struct:SM::Flow::P 
  body: "There are some `low level' methods, which do not accept any option:"
- !ruby/struct:SM::Flow::VERB 
  body: "  copy_entry(src, dest, preserve = false, dereference = false)\n  copy_file(src, dest, preserve = false, dereference = true)\n  copy_stream(srcstream, deststream)\n  remove_entry(path, force = false)\n  remove_entry_secure(path, force = false)\n  remove_file(path, force = false)\n  compare_file(path_a, path_b)\n  compare_stream(stream_a, stream_b)\n  uptodate?(file, cmp_list)\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: module FileUtils::Verbose
- !ruby/struct:SM::Flow::P 
  body: This module has all methods of FileUtils module, but it outputs messages before acting. This equates to passing the <tt>:verbose</tt> flag to methods in FileUtils.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: module FileUtils::NoWrite
- !ruby/struct:SM::Flow::P 
  body: This module has all methods of FileUtils module, but never changes files/directories. This equates to passing the <tt>:noop</tt> flag to methods in FileUtils.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: module FileUtils::DryRun
- !ruby/struct:SM::Flow::P 
  body: This module has all methods of FileUtils module, but never changes files/directories. This equates to passing the <tt>:noop</tt> and <tt>:verbose</tt> flags to methods in FileUtils.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: METHODS
  value: singleton_methods() - %w( private_module_function       commands options have_option? options_of collect_method )
full_name: FileUtils
includes: 
- !ruby/object:RI::IncludedModule 
  name: StreamUtils_
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: cd
- !ruby/object:RI::MethodSummary 
  name: chdir
- !ruby/object:RI::MethodSummary 
  name: chmod
- !ruby/object:RI::MethodSummary 
  name: chmod_R
- !ruby/object:RI::MethodSummary 
  name: chown
- !ruby/object:RI::MethodSummary 
  name: chown_R
- !ruby/object:RI::MethodSummary 
  name: cmp
- !ruby/object:RI::MethodSummary 
  name: compare_file
- !ruby/object:RI::MethodSummary 
  name: compare_stream
- !ruby/object:RI::MethodSummary 
  name: copy
- !ruby/object:RI::MethodSummary 
  name: copy_entry
- !ruby/object:RI::MethodSummary 
  name: copy_file
- !ruby/object:RI::MethodSummary 
  name: copy_stream
- !ruby/object:RI::MethodSummary 
  name: cp
- !ruby/object:RI::MethodSummary 
  name: cp_r
- !ruby/object:RI::MethodSummary 
  name: fu_have_symlink?
- !ruby/object:RI::MethodSummary 
  name: fu_world_writable?
- !ruby/object:RI::MethodSummary 
  name: getwd
- !ruby/object:RI::MethodSummary 
  name: identical?
- !ruby/object:RI::MethodSummary 
  name: install
- !ruby/object:RI::MethodSummary 
  name: link
- !ruby/object:RI::MethodSummary 
  name: ln
- !ruby/object:RI::MethodSummary 
  name: ln_s
- !ruby/object:RI::MethodSummary 
  name: ln_sf
- !ruby/object:RI::MethodSummary 
  name: makedirs
- !ruby/object:RI::MethodSummary 
  name: mkdir
- !ruby/object:RI::MethodSummary 
  name: mkdir_p
- !ruby/object:RI::MethodSummary 
  name: mkpath
- !ruby/object:RI::MethodSummary 
  name: move
- !ruby/object:RI::MethodSummary 
  name: mv
- !ruby/object:RI::MethodSummary 
  name: pwd
- !ruby/object:RI::MethodSummary 
  name: remove
- !ruby/object:RI::MethodSummary 
  name: remove_dir
- !ruby/object:RI::MethodSummary 
  name: remove_entry
- !ruby/object:RI::MethodSummary 
  name: remove_entry_secure
- !ruby/object:RI::MethodSummary 
  name: remove_file
- !ruby/object:RI::MethodSummary 
  name: rm
- !ruby/object:RI::MethodSummary 
  name: rm_f
- !ruby/object:RI::MethodSummary 
  name: rm_r
- !ruby/object:RI::MethodSummary 
  name: rm_rf
- !ruby/object:RI::MethodSummary 
  name: rmdir
- !ruby/object:RI::MethodSummary 
  name: rmtree
- !ruby/object:RI::MethodSummary 
  name: safe_unlink
- !ruby/object:RI::MethodSummary 
  name: symlink
- !ruby/object:RI::MethodSummary 
  name: touch
- !ruby/object:RI::MethodSummary 
  name: uptodate?
name: FileUtils
superclass: 

--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Produces a shallow copy of <em>obj</em>---the instance variables of <em>obj</em> are copied, but not the objects they reference. Copies the frozen and tainted state of <em>obj</em>. See also the discussion under <tt>Object#dup</tt>.
- !ruby/struct:SM::Flow::VERB 
  body: "   class Klass\n      attr_accessor :str\n   end\n   s1 = Klass.new      #=&gt; #&lt;Klass:0x401b3a38&gt;\n   s1.str = &quot;Hello&quot;    #=&gt; &quot;Hello&quot;\n   s2 = s1.clone       #=&gt; #&lt;Klass:0x401b3998 @str=&quot;Hello&quot;&gt;\n   s2.str[1,4] = &quot;i&quot;   #=&gt; &quot;i&quot;\n   s1.inspect          #=&gt; &quot;#&lt;Klass:0x401b3a38 @str=\\&quot;Hi\\&quot;&gt;&quot;\n   s2.inspect          #=&gt; &quot;#&lt;Klass:0x401b3998 @str=\\&quot;Hi\\&quot;&gt;&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "This method may have class-specific behavior. If so, that behavior will be documented under the #<tt>initialize_copy</tt> method of the class."
full_name: Object#clone
is_singleton: false
name: clone
params: |
  obj.clone -> an_object

visibility: public

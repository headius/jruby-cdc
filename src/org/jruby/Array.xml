<?xml version="1.0"?>

<!--
 Copyright (C) 2002 Thomas E Enebo <enebo@acm.org>

 JRuby - http://jruby.sourceforge.net

 This file is part of JRuby

 JRuby is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License or
 under the terms of the GNU Lesser General Public License as
 published by the Free Software Foundation; either version 2 of the
 License, or (at your option) any later version.

 JRuby is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License and GNU Lesser General Public License
 for more details.

 You should have received a copy of the GNU General Public
 License and GNU Lesser General Public License along with JRuby;
 if not, write to
 the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA  02111-1307 USA
-->

<module type="class">
  <name>Array</name>
  <superclass>Object</superclass>
  <includes>Enumerable</includes>

  <implementation>org.jruby.RubyArray</implementation>

  <instance-methods>
    <method name="at">
      <arity>1</arity>
    </method>
    <method name="initialize">
      <arity optional="true">0</arity>
    </method>
    <method name="inspect"/>
    <method name="to_s"/>
    <method name="to_a"/>
    <method-alias name="to_ary" original="to_a"/>
    <method name="frozen?">
      <java>frozen</java>
    </method>
    <method name="==">
      <arity>1</arity>
      <java>equal</java>
    </method>
    <method name="eql?">
      <arity>1</arity>
      <java>eql</java>
    </method>
    <method-alias name="===" original="=="/>
    <method name="hash"/>
    <method name="[]">
      <arity optional="true">0</arity>
      <java>aref</java>
    </method>
    <method-alias name="slice" original="[]"/>
    <method name="slice!">
      <arity optional="true">1</arity>
      <java>slice_bang</java>
    </method>
    <method name="[]=">
      <arity optional="true">0</arity>
      <java>aset</java>
    </method>
    <method name="first"/>
    <method name="last"/>
    <method name="concat">
      <arity>1</arity>
    </method>
    <method name="&lt;&lt;">
      <arity>1</arity>
      <java>append</java>
    </method>
    <method name="push">
      <arity optional="true">1</arity>
    </method>
    <method name="pop"/>
    <method name="shift"/>
    <method name="unshift">
      <arity optional="true">0</arity>
    </method>
    <method name="each"/>
    <method name="each_index"/>
    <method name="reverse_each"/>
    <method name="length"/>
    <method-alias name="size" original="length"/>
    <method name="empty?">
      <java>empty_p</java>
    </method>
    <method name="index">
      <arity>1</arity>
    </method>
    <method name="rindex">
      <arity>1</arity>
    </method>
    <method name="indices">
      <arity optional="true">0</arity>
    </method>
    <method-alias name="indexes" original="indices"/>
    <method name="clone">
      <java>rbClone</java>
    </method>
    <method name="join">
      <arity optional="true">0</arity>
    </method>
    <method name="reverse"/>
    <method name="reverse!">
      <java>reverse_bang</java>
    </method>
    <method name="sort"/>
    <method name="sort!">
      <java>sort_bang</java>
    </method>
    <method name="collect"/>
    <method name="collect!">
      <java>collect_bang</java>
    </method>
    <method-alias name="map!" original="collect!"/>
    <method-alias name="filter" original="collect!"/>
    <method name="delete">
      <arity>1</arity>
    </method>
    <method name="delete_at">
      <arity>1</arity>
    </method>
    <method name="delete_if"/>
    <method name="reject!">
      <java>reject_bang</java>
    </method>
    <method name="replace">
      <arity>1</arity>
    </method>
    <method name="clear"/>
    <method name="fill">
      <arity optional="true">0</arity>
    </method>
    <method name="include?">
      <arity>1</arity>
      <java>include_p</java>
    </method>
    <method name="assoc">
      <arity>1</arity>
    </method>
    <method name="rassoc">
      <arity>1</arity>
    </method>
    <method name="+">
      <arity>1</arity>
      <java>op_plus</java>
    </method>
    <method name="-">
      <arity>1</arity>
      <java>op_diff</java>
    </method>
    <method name="*">
      <arity>1</arity>
      <java>op_times</java>
    </method>
    <method name="&amp;">
      <arity>1</arity>
      <java>op_and</java>
    </method>
    <method name="|">
      <arity>1</arity>
      <java>op_or</java>
    </method>
    <method name="pack">
      <arity>1</arity>
    </method>
    <method name="uniq"/>
    <method name="uniq!">
      <java>uniq_bang</java>
    </method>
    <method name="compact"/>
    <method name="compact!">
      <java>compact_bang</java>
    </method>
    <method name="flatten"/>
    <method name="nitems"/>
    <method name="flatten!">
      <java>flatten_bang</java>
    </method>
    <method name="&lt;=>">
      <arity>1</arity>
      <java>op_cmp</java>
    </method>
    <method-alias name="slice" original="[]"/>
  </instance-methods>

  <class-methods>
    <method name="new">
      <arity optional="true">0</arity>
      <java>newInstance</java>
    </method>
    <method name="[]">
      <arity optional="true">0</arity>
      <java>create</java>
    </method>
  </class-methods>

</module>

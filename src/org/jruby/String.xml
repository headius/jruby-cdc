<?xml version="1.0"?>

<module type="class">
  <name>String</name>
  <superclass>Object</superclass>
  <includes>Comparable</includes>
  <includes>Enumerable</includes>

  <implementation>org.jruby.RubyString</implementation>

  <instance-methods>
    <method name="replace">
      <arity>1</arity>
    </method>
    <method-alias name="initialize" original="replace"/>
    <method name="clone">
      <java>rbClone</java>
    </method>
    <method name="dup"/>
    <method name="&lt;=>">
      <arity>1</arity>
      <java>op_cmp</java>
    </method>
    <method name="==">
      <arity>1</arity>
      <java>equal</java>
    </method>
    <method-alias name="===" original="=="/>
    <method-alias name="eql?" original="=="/>
    <method name="hash"/>
    <method name="+">
      <arity>1</arity>
      <java>op_plus</java>
    </method>
    <method name="*">
      <arity>1</arity>
      <java>op_mul</java>
    </method>
    <method name="%">
      <arity>1</arity>
      <java>format</java>
    </method>
    <method name="[]">
      <arity optional="true">0</arity>
      <java>aref</java>
    </method>
    <method name="[]=">
      <arity optional="true">0</arity>
      <java>aset</java>
    </method>
    <method name="length"/>
    <method-alias name="size" original="length"/>

    <method name="empty?">
      <java>empty</java>
    </method>
    <method name="=~">
      <arity>1</arity>
      <java>match</java>
    </method>
    <method name="~">
      <java>match2</java>
    </method>
    <method name="succ"/>
    <method name="succ!">
      <java>succ_bang</java>
    </method>
    <method-alias name="next" original="succ"/>
    <method-alias name="next!" original="succ!"/>
    <method name="upto">
      <arity>1</arity>
    </method>
    <method name="index">
      <arity optional="true">0</arity>
    </method>
    <method name="rindex">
      <arity optional="true">0</arity>
    </method>
    <method name="to_i"/>
    <method name="to_f"/>
    <method name="to_s" />
    <method-alias name="to_str" original="to_s"/>
    <method name="inspect"/>
    <method name="dump"/>
    <method name="upcase"/>
    <method name="downcase"/>
    <method name="capitalize"/>
    <method name="concat">
      <arity>1</arity>
    </method>
    <method-alias name="&lt;&lt;" original="concat"/>
    <!-- crypt -->
    <method name="intern"/>
    <method name="sum">
      <arity optional="true">0</arity>
    </method>

    <method-alias name="slice" original="[]"/>


    <!--

    <method name="swapcase", CallbackFactory.getMethod(RubyString.class, "swapcase"));

    <method name="upcase!", CallbackFactory.getMethod(RubyString.class, "upcase_bang"));
    <method name="downcase!", CallbackFactory.getMethod(RubyString.class, "downcase_bang"));
    <method name="capitalize!", CallbackFactory.getMethod(RubyString.class, "capitalize_bang"));
    <method name="swapcase!", CallbackFactory.getMethod(RubyString.class, "swapcase_bang"));

    <method name="hex", CallbackFactory.getMethod(RubyString.class, "hex"));
    <method name="oct", CallbackFactory.getMethod(RubyString.class, "oct"));
    <method name="split", CallbackFactory.getOptMethod(RubyString.class, "split"));
    <method name="reverse", CallbackFactory.getMethod(RubyString.class, "reverse"));
    <method name="reverse!", CallbackFactory.getMethod(RubyString.class, "reverse_bang"));
    <method name="include?", CallbackFactory.getMethod(RubyString.class, "include", IRubyObject.class));

    <method name="scan", CallbackFactory.getMethod(RubyString.class, "scan", IRubyObject.class));

    <method name="ljust", CallbackFactory.getMethod(RubyString.class, "ljust", IRubyObject.class));
    <method name="rjust", CallbackFactory.getMethod(RubyString.class, "rjust", IRubyObject.class));
    <method name="center", CallbackFactory.getMethod(RubyString.class, "center", IRubyObject.class));

    <method name="sub", CallbackFactory.getOptMethod(RubyString.class, "sub"));
    <method name="gsub", CallbackFactory.getOptMethod(RubyString.class, "gsub"));
    <method name="chop", CallbackFactory.getMethod(RubyString.class, "chop"));
    <method name="chomp", CallbackFactory.getOptMethod(RubyString.class, "chomp"));
    <method name="strip", CallbackFactory.getMethod(RubyString.class, "strip"));

    <method name="sub!", CallbackFactory.getOptMethod(RubyString.class, "sub_bang"));
    <method name="gsub!", CallbackFactory.getOptMethod(RubyString.class, "gsub_bang"));
    <method name="chop!", CallbackFactory.getMethod(RubyString.class, "chop_bang"));
    <method name="chomp!", CallbackFactory.getOptMethod(RubyString.class, "chomp_bang"));
    <method name="strip!", CallbackFactory.getMethod(RubyString.class, "strip_bang"));

    <method name="tr", CallbackFactory.getOptMethod(RubyString.class, "tr"));
    <method name="tr_s", CallbackFactory.getOptMethod(RubyString.class, "tr_s"));
    <method name="delete", CallbackFactory.getOptMethod(RubyString.class, "delete"));
    <method name="squeeze", CallbackFactory.getOptMethod(RubyString.class, "squeeze"));
    <method name="count", CallbackFactory.getOptMethod(RubyString.class, "count"));

    <method name="tr!", CallbackFactory.getOptMethod(RubyString.class, "tr_bang"));
    <method name="tr_s!", CallbackFactory.getOptMethod(RubyString.class, "tr_s_bang"));
    <method name="delete!", CallbackFactory.getOptMethod(RubyString.class, "delete_bang"));
    <method name="squeeze!", CallbackFactory.getOptMethod(RubyString.class, "squeeze_bang"));

    <method name="each_line", CallbackFactory.getOptMethod(RubyString.class, "each_line"));
    <method name="each", CallbackFactory.getOptMethod(RubyString.class, "each_line"));
    <method name="each_byte", CallbackFactory.getMethod(RubyString.class, "each_byte"));
    <method name="slice!", CallbackFactory.getOptMethod(RubyString.class, "slice_bang"));

    <method name="unpack", CallbackFactory.getMethod(RubyString.class, "unpack", RubyString.class));

    -->


  </instance-methods>

  <class-methods>
    <method name="new">
      <arity optional="true">0</arity>
      <java>newInstance</java>
    </method>
  </class-methods>

</module>

<?xml version="1.0"?>

<!-- crypt is only missing function -->

<module type="class">
  <name>String</name>
  <superclass>Object</superclass>
  <includes>Comparable</includes>
  <includes>Enumerable</includes>

  <implementation>org.jruby.RubyString</implementation>

  <instance-methods>
    <method name="replace">
      <arity>1</arity>
    </method>
    <method-alias name="initialize" original="replace"/>
    <method name="clone">
      <java>rbClone</java>
    </method>
    <method name="dup"/>
    <method name="&lt;=>">
      <arity>1</arity>
      <java>op_cmp</java>
    </method>
    <method name="==">
      <arity>1</arity>
      <java>equal</java>
    </method>
    <method-alias name="===" original="=="/>
    <method-alias name="eql?" original="=="/>
    <method name="hash"/>
    <method name="+">
      <arity>1</arity>
      <java>op_plus</java>
    </method>
    <method name="*">
      <arity>1</arity>
      <java>op_mul</java>
    </method>
    <method name="%">
      <arity>1</arity>
      <java>format</java>
    </method>
    <method name="[]">
      <arity optional="true">0</arity>
      <java>aref</java>
    </method>
    <method name="[]=">
      <arity optional="true">0</arity>
      <java>aset</java>
    </method>
    <method name="length"/>
    <method-alias name="size" original="length"/>

    <method name="empty?">
      <java>empty</java>
    </method>
    <method name="=~">
      <arity>1</arity>
      <java>match</java>
    </method>
    <method name="~">
      <java>match2</java>
    </method>
    <method name="split">
       <arity optional="true">0</arity>
    </method>
    <method name="succ"/>
    <method name="succ!">
      <java>succ_bang</java>
    </method>
    <method name="swapcase"/>
    <method name="swapcase!">
      <java>swapcase_bang</java>
    </method>
    <method-alias name="next" original="succ"/>
    <method-alias name="next!" original="succ!"/>
    <method name="upto">
      <arity>1</arity>
    </method>
    <method name="include?">
      <arity>1</arity>
      <java>include</java>
    </method>
    <method name="index">
      <arity optional="true">0</arity>
    </method>
    <method name="rindex">
      <arity optional="true">0</arity>
    </method>
    <method name="to_i"/>
    <method name="to_f"/>
    <method name="to_s" />
    <method-alias name="to_str" original="to_s"/>
    <method name="inspect"/>
    <method name="dump"/>
    <method name="upcase"/>
    <method name="upcase!">
      <java>upcase_bang</java>
    </method>
    <method name="downcase"/>
    <method name="downcase!">
      <java>downcase_bang</java>
    </method>
    <method name="reverse"/>
    <method name="reverse!">
      <java>reverse_bang</java>
    </method>
    <method name="hex"/>
    <method name="oct"/>
    <method name="capitalize"/>
    <method name="capitalize!">
      <java>capitalize_bang</java>
    </method>
    <method name="concat">
      <arity>1</arity>
    </method>
    <method-alias name="&lt;&lt;" original="concat"/>
    <!-- crypt -->
    <method name="intern"/>
    <method name="sum">
      <arity optional="true">0</arity>
    </method>
    <method name="scan">
      <arity>1</arity>
    </method>
    <method name="ljust">
      <arity>1</arity>
    </method>
    <method name="rjust">
      <arity>1</arity>
    </method>
    <method name="center">
      <arity>1</arity>
    </method>
    <method name="chomp">
      <arity optional="true">0</arity>
    </method>
    <method name="chomp!">
      <java>chomp_bang</java>
      <arity optional="true">0</arity>
    </method>
    <method name="chop"/>
    <method name="chop!">
      <java>chop_bang</java>
    </method>
    <method name="strip"/>
    <method name="strip!">
      <java>strip_bang</java>
    </method>
    <method name="squeeze">
      <arity optional="true">0</arity>
    </method>
    <method name="squeeze!">
      <java>squeeze_bang</java>
      <arity optional="true">0</arity>
    </method>
    <method name="sub">
      <arity optional="true">0</arity>
    </method>
    <method name="sub!">
      <java>sub_bang</java>
      <arity optional="true">0</arity>
    </method>
    <method name="gsub">
      <arity optional="true">0</arity>
    </method>
    <method name="gsub!">
      <java>gsub_bang</java>
      <arity optional="true">0</arity>
    </method>
    <method name="tr">
      <arity>2</arity>
    </method>
    <method name="tr!">
      <java>tr_bang</java>
      <arity>2</arity>
    </method>
    <method name="tr_s">
      <arity>2</arity>
    </method>
    <method name="tr_s!">
      <java>tr_s_bang</java>
      <arity>2</arity>
    </method>
    <method name="delete">
      <arity optional="true">1</arity>
    </method>
    <method name="delete!">
      <java>delete_bang</java>
      <arity optional="true">1</arity>
    </method>
    <method-alias name="slice" original="[]"/>
    <method name="slice!">
      <arity optional="true">1</arity>
      <java>slice_bang</java>
    </method>
    <method name="count">
      <arity optional="true">1</arity>
    </method>
    <method name="each_byte"/>
    <method name="each_line">
      <arity optional="true">0</arity>
    </method>
    <method-alias name="each" original="each_line"/>
    <method name="unpack">
      <arity>1</arity>
    </method>
  </instance-methods>

  <class-methods>
    <method name="new">
      <arity optional="true">0</arity>
      <java>newInstance</java>
    </method>
  </class-methods>

</module>

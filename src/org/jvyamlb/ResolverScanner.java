
package org.jvyamlb;

import org.jruby.util.ByteList;

public class ResolverScanner {



static final byte[] _resolver_scanner_actions = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7
};

static final short[] _resolver_scanner_key_offsets = {
	0, 20, 20, 23, 25, 27, 31, 34, 
	41, 45, 52, 54, 55, 56, 58, 59, 
	60, 61, 62, 64, 67, 69, 75, 79, 
	82, 83, 85, 87, 88, 90, 92, 97, 
	99, 101, 103, 107, 109, 110, 112, 118, 
	123, 127, 131, 133, 139, 144, 149, 153, 
	154, 156, 157, 158, 159, 160, 161, 162, 
	165, 166, 167, 171, 172, 173, 175, 176, 
	177, 179, 180, 181, 182, 184, 186, 187, 
	188, 188, 196, 201, 203, 209, 212, 219, 
	224, 227, 228, 228, 237, 244, 251, 259, 
	265, 268, 269, 269, 276, 280, 287, 290, 
	295, 300, 305, 311, 316, 320, 322, 322, 
	322
};

static final char[] _resolver_scanner_trans_keys = {
	32, 43, 45, 46, 48, 60, 61, 70, 
	78, 79, 84, 89, 102, 110, 111, 116, 
	121, 126, 49, 57, 48, 49, 57, 43, 
	45, 48, 57, 46, 95, 48, 57, 95, 
	48, 49, 95, 48, 57, 65, 70, 97, 
	102, 48, 53, 54, 57, 73, 78, 95, 
	105, 110, 48, 57, 78, 110, 70, 102, 
	65, 97, 78, 110, 97, 110, 48, 57, 
	45, 48, 57, 48, 57, 9, 32, 84, 
	116, 48, 57, 9, 32, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 9, 32, 43, 45, 
	90, 48, 57, 48, 57, 48, 57, 9, 
	32, 84, 116, 48, 57, 45, 48, 57, 
	9, 32, 84, 116, 48, 57, 46, 58, 
	95, 48, 57, 48, 53, 54, 57, 46, 
	58, 48, 57, 46, 58, 45, 46, 58, 
	95, 48, 57, 46, 58, 95, 48, 57, 
	46, 58, 95, 48, 57, 48, 53, 54, 
	57, 60, 65, 97, 76, 83, 69, 108, 
	115, 101, 79, 111, 117, 108, 108, 70, 
	78, 102, 110, 70, 102, 82, 114, 85, 
	117, 69, 101, 83, 115, 97, 111, 117, 
	102, 110, 114, 101, 46, 95, 98, 120, 
	48, 55, 56, 57, 69, 95, 101, 48, 
	57, 48, 57, 46, 95, 48, 55, 56, 
	57, 95, 48, 49, 95, 48, 57, 65, 
	70, 97, 102, 46, 58, 95, 48, 57, 
	58, 48, 57, 58, 46, 58, 95, 98, 
	120, 48, 55, 56, 57, 46, 58, 95, 
	48, 55, 56, 57, 46, 58, 95, 48, 
	55, 56, 57, 45, 46, 58, 95, 48, 
	55, 56, 57, 9, 32, 43, 45, 46, 
	90, 58, 48, 57, 58, 9, 32, 43, 
	45, 90, 48, 57, 9, 32, 84, 116, 
	46, 58, 95, 48, 55, 56, 57, 95, 
	48, 57, 46, 58, 95, 48, 57, 46, 
	58, 95, 48, 57, 46, 58, 95, 48, 
	57, 45, 46, 58, 95, 48, 57, 46, 
	58, 95, 48, 57, 46, 58, 48, 57, 
	46, 58, 0
};

static final byte[] _resolver_scanner_single_lengths = {
	18, 0, 1, 2, 0, 2, 1, 1, 
	0, 5, 2, 1, 1, 2, 1, 1, 
	1, 1, 0, 1, 0, 4, 2, 1, 
	1, 0, 0, 1, 0, 0, 5, 0, 
	0, 0, 4, 0, 1, 0, 4, 3, 
	0, 2, 2, 4, 3, 3, 0, 1, 
	2, 1, 1, 1, 1, 1, 1, 3, 
	1, 1, 4, 1, 1, 2, 1, 1, 
	2, 1, 1, 1, 2, 2, 1, 1, 
	0, 4, 3, 0, 2, 1, 1, 3, 
	1, 1, 0, 5, 3, 3, 4, 6, 
	1, 1, 0, 5, 4, 3, 1, 3, 
	3, 3, 4, 3, 2, 2, 0, 0, 
	0
};

static final byte[] _resolver_scanner_range_lengths = {
	1, 0, 1, 0, 1, 1, 1, 3, 
	2, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 0, 1, 0, 1, 1, 1, 
	2, 1, 0, 1, 1, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 1, 1, 2, 1, 3, 1, 
	1, 0, 0, 2, 2, 2, 2, 0, 
	1, 0, 0, 1, 0, 2, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0
};

static final short[] _resolver_scanner_index_offsets = {
	0, 20, 20, 23, 26, 28, 32, 35, 
	40, 43, 50, 53, 55, 57, 60, 62, 
	64, 66, 68, 70, 73, 75, 81, 85, 
	88, 90, 92, 94, 96, 98, 100, 106, 
	108, 110, 112, 117, 119, 121, 123, 129, 
	134, 137, 141, 144, 150, 155, 160, 163, 
	165, 168, 170, 172, 174, 176, 178, 180, 
	184, 186, 188, 193, 195, 197, 200, 202, 
	204, 207, 209, 211, 213, 216, 219, 221, 
	223, 224, 231, 236, 238, 243, 246, 251, 
	256, 259, 261, 262, 270, 276, 282, 289, 
	296, 299, 301, 302, 309, 314, 320, 323, 
	328, 333, 338, 344, 349, 353, 356, 357, 
	358
};

static final byte[] _resolver_scanner_indicies = {
	35, 61, 61, 62, 63, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 35, 64, 0, 89, 23, 0, 60, 
	60, 0, 9, 0, 11, 19, 19, 0, 
	14, 14, 0, 15, 15, 15, 15, 0, 
	88, 16, 0, 49, 50, 11, 51, 52, 
	11, 0, 40, 41, 0, 34, 0, 34, 
	0, 46, 46, 0, 34, 0, 41, 0, 
	37, 0, 34, 0, 94, 0, 58, 59, 
	0, 102, 0, 1, 1, 2, 2, 96, 
	0, 1, 1, 77, 0, 54, 53, 0, 
	54, 0, 101, 0, 91, 0, 48, 0, 
	100, 0, 87, 0, 5, 5, 6, 6, 
	8, 0, 86, 0, 92, 0, 8, 0, 
	1, 1, 2, 2, 0, 77, 0, 57, 
	0, 95, 0, 1, 1, 2, 2, 78, 
	0, 11, 26, 56, 56, 0, 93, 55, 
	0, 10, 26, 55, 0, 10, 26, 0, 
	28, 11, 26, 56, 56, 0, 11, 26, 
	56, 81, 0, 11, 26, 56, 99, 0, 
	90, 22, 0, 47, 0, 85, 84, 0, 
	42, 0, 38, 0, 31, 0, 83, 0, 
	30, 0, 31, 0, 31, 31, 33, 0, 
	82, 0, 35, 0, 43, 31, 36, 31, 
	0, 31, 0, 31, 0, 39, 32, 0, 
	38, 0, 30, 0, 44, 45, 0, 31, 
	0, 31, 0, 84, 0, 31, 33, 0, 
	36, 31, 0, 32, 0, 45, 0, 0, 
	11, 18, 20, 21, 18, 19, 0, 12, 
	11, 12, 11, 0, 9, 0, 11, 18, 
	18, 19, 0, 14, 14, 0, 15, 15, 
	15, 15, 0, 11, 13, 23, 23, 0, 
	13, 16, 0, 13, 0, 0, 11, 26, 
	27, 20, 21, 24, 25, 0, 11, 26, 
	27, 98, 99, 0, 11, 26, 27, 80, 
	81, 0, 28, 11, 26, 27, 27, 56, 
	0, 5, 5, 6, 6, 7, 8, 0, 
	3, 4, 0, 3, 0, 0, 5, 5, 
	6, 6, 8, 7, 0, 1, 1, 2, 
	2, 0, 11, 26, 27, 27, 56, 0, 
	10, 10, 0, 11, 17, 29, 103, 0, 
	11, 17, 29, 97, 0, 11, 17, 29, 
	79, 0, 28, 11, 17, 29, 29, 0, 
	11, 17, 29, 29, 0, 10, 17, 22, 
	0, 10, 17, 0, 0, 0, 0, 0
};

static final byte[] _resolver_scanner_trans_targs_wi = {
	1, 22, 35, 32, 89, 30, 31, 91, 
	90, 75, 94, 74, 3, 8, 77, 78, 
	81, 46, 76, 5, 6, 7, 101, 79, 
	84, 45, 40, 93, 18, 99, 54, 104, 
	63, 56, 82, 72, 60, 17, 51, 62, 
	11, 12, 50, 59, 65, 66, 14, 102, 
	28, 10, 13, 15, 16, 24, 25, 42, 
	39, 37, 20, 36, 4, 2, 9, 83, 
	95, 47, 103, 48, 55, 58, 61, 64, 
	67, 68, 69, 70, 71, 23, 92, 98, 
	86, 43, 57, 53, 52, 49, 88, 87, 
	80, 73, 100, 27, 33, 41, 19, 38, 
	34, 97, 85, 44, 29, 26, 21, 96
};

static final byte[] _resolver_scanner_trans_actions_wi = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static final byte[] _resolver_scanner_eof_actions = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 15, 13, 13, 15, 15, 15, 15, 
	15, 15, 13, 15, 15, 15, 15, 9, 
	9, 9, 9, 9, 7, 15, 13, 15, 
	15, 15, 15, 15, 15, 15, 3, 11, 
	1
};

static final int resolver_scanner_start = 0;

static final int resolver_scanner_error = 1;


   public String recognize(ByteList list) {
       String tag = null;
       int cs;
       int act;
       int have = 0;
       int nread = 0;
       int p=0;
       int pe = list.realSize;
       int tokstart = -1;
       int tokend = -1;

       byte[] data = list.bytes;
       if(pe == 0) {
         data = new byte[]{(byte)'~'};
         pe = 1;
       }
              

	{
	cs = resolver_scanner_start;
	}


	{
	int _klen;
	int _trans;
	int _keys;

	if ( p != pe ) {
	_resume: while ( true ) {
	_again: do {
	if ( cs == 1 )
		break _resume;
	_match: do {
	_keys = _resolver_scanner_key_offsets[cs];
	_trans = _resolver_scanner_index_offsets[cs];
	_klen = _resolver_scanner_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _resolver_scanner_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _resolver_scanner_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _resolver_scanner_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _resolver_scanner_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _resolver_scanner_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _resolver_scanner_indicies[_trans];
	cs = _resolver_scanner_trans_targs_wi[_trans];

	} while (false);
	if ( ++p == pe )
		break _resume;
	}
	}
	}


	int _acts = _resolver_scanner_eof_actions[cs];
	int _nacts = (int) _resolver_scanner_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _resolver_scanner_actions[_acts++] ) {
	case 0:
	{ tag = "tag:yaml.org,2002:bool"; }
	break;
	case 1:
	{ tag = "tag:yaml.org,2002:merge"; }
	break;
	case 2:
	{ tag = "tag:yaml.org,2002:null"; }
	break;
	case 3:
	{ tag = "tag:yaml.org,2002:timestamp#ymd"; }
	break;
	case 4:
	{ tag = "tag:yaml.org,2002:timestamp"; }
	break;
	case 5:
	{ tag = "tag:yaml.org,2002:value"; }
	break;
	case 6:
	{ tag = "tag:yaml.org,2002:float"; }
	break;
	case 7:
	{ tag = "tag:yaml.org,2002:int"; }
	break;
		}
	}

       return tag;
   }

   public static void main(String[] args) {
       ByteList b = new ByteList(78);
       b.append(args[0].getBytes());
/*
       for(int i=0;i<b.realSize;i++) {
           System.err.println("byte " + i + " is " + b.bytes[i] + " char is: " + args[0].charAt(i));
       }
*/
       System.err.println(new ResolverScanner().recognize(b));
   }
}
